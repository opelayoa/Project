package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "EXPRESS_RECEIPT".
 */
public class ExpressReceipt extends EqualsBase  {

    private Long id;
    private String barcode;
    private String brandType;
    private String expirationDate;
    private Integer boxesPallet;
    private Integer folio;
    private Integer folioOdc;
    private Integer folioReceipt;
    private Integer iclave;
    private int cantidad;
    private String lote;
    private Boolean received;
    private Short scaffoldNum;
    private String unit;
    private String unitType;
    private long regionId;
    private long buyDetailId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExpressReceiptDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private BuyDetail buyDetail;
    private Long buyDetail__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ExpressReceipt() {
    }

    public ExpressReceipt(Long id) {
        this.id = id;
    }

    public ExpressReceipt(Long id, String barcode, String brandType, String expirationDate, Integer boxesPallet, Integer folio, Integer folioOdc, Integer folioReceipt, Integer iclave, int cantidad, String lote, Boolean received, Short scaffoldNum, String unit, String unitType, long regionId, long buyDetailId) {
        this.id = id;
        this.barcode = barcode;
        this.brandType = brandType;
        this.expirationDate = expirationDate;
        this.boxesPallet = boxesPallet;
        this.folio = folio;
        this.folioOdc = folioOdc;
        this.folioReceipt = folioReceipt;
        this.iclave = iclave;
        this.cantidad = cantidad;
        this.lote = lote;
        this.received = received;
        this.scaffoldNum = scaffoldNum;
        this.unit = unit;
        this.unitType = unitType;
        this.regionId = regionId;
        this.buyDetailId = buyDetailId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExpressReceiptDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public String getBrandType() {
        return brandType;
    }

    public void setBrandType(String brandType) {
        this.brandType = brandType;
    }

    public String getExpirationDate() {
        return expirationDate;
    }

    public void setExpirationDate(String expirationDate) {
        this.expirationDate = expirationDate;
    }

    public Integer getBoxesPallet() {
        return boxesPallet;
    }

    public void setBoxesPallet(Integer boxesPallet) {
        this.boxesPallet = boxesPallet;
    }

    public Integer getFolio() {
        return folio;
    }

    public void setFolio(Integer folio) {
        this.folio = folio;
    }

    public Integer getFolioOdc() {
        return folioOdc;
    }

    public void setFolioOdc(Integer folioOdc) {
        this.folioOdc = folioOdc;
    }

    public Integer getFolioReceipt() {
        return folioReceipt;
    }

    public void setFolioReceipt(Integer folioReceipt) {
        this.folioReceipt = folioReceipt;
    }

    public Integer getIclave() {
        return iclave;
    }

    public void setIclave(Integer iclave) {
        this.iclave = iclave;
    }

    public int getCantidad() {
        return cantidad;
    }

    public void setCantidad(int cantidad) {
        this.cantidad = cantidad;
    }

    public String getLote() {
        return lote;
    }

    public void setLote(String lote) {
        this.lote = lote;
    }

    public Boolean getReceived() {
        return received;
    }

    public void setReceived(Boolean received) {
        this.received = received;
    }

    public Short getScaffoldNum() {
        return scaffoldNum;
    }

    public void setScaffoldNum(Short scaffoldNum) {
        this.scaffoldNum = scaffoldNum;
    }

    public String getUnit() {
        return unit;
    }

    public void setUnit(String unit) {
        this.unit = unit;
    }

    public String getUnitType() {
        return unitType;
    }

    public void setUnitType(String unitType) {
        this.unitType = unitType;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getBuyDetailId() {
        return buyDetailId;
    }

    public void setBuyDetailId(long buyDetailId) {
        this.buyDetailId = buyDetailId;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BuyDetail getBuyDetail() {
        long __key = this.buyDetailId;
        if (buyDetail__resolvedKey == null || !buyDetail__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BuyDetailDao targetDao = daoSession.getBuyDetailDao();
            BuyDetail buyDetailNew = targetDao.load(__key);
            synchronized (this) {
                buyDetail = buyDetailNew;
            	buyDetail__resolvedKey = __key;
            }
        }
        return buyDetail;
    }

    public void setBuyDetail(BuyDetail buyDetail) {
        if (buyDetail == null) {
            throw new DaoException("To-one property 'buyDetailId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.buyDetail = buyDetail;
            buyDetailId = buyDetail.getId();
            buyDetail__resolvedKey = buyDetailId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
