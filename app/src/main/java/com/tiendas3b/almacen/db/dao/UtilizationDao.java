package com.tiendas3b.almacen.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.Utilization;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UTILIZATION".
*/
public class UtilizationDao extends AbstractDao<Utilization, Long> {

    public static final String TABLENAME = "UTILIZATION";

    /**
     * Properties of entity Utilization.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NumAnden = new Property(1, Integer.class, "numAnden", false, "NUM_ANDEN");
        public final static Property UseTime = new Property(2, Integer.class, "useTime", false, "USE_TIME");
        public final static Property TotalTime = new Property(3, Integer.class, "totalTime", false, "TOTAL_TIME");
        public final static Property UsePercentage = new Property(4, Float.class, "usePercentage", false, "USE_PERCENTAGE");
        public final static Property PalletsSum = new Property(5, Integer.class, "palletsSum", false, "PALLETS_SUM");
        public final static Property TimetableInfoId = new Property(6, long.class, "timetableInfoId", false, "TIMETABLE_INFO_ID");
    };

    private Query<Utilization> timetableInfo_UtilizationsQuery;

    public UtilizationDao(DaoConfig config) {
        super(config);
    }
    
    public UtilizationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UTILIZATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUM_ANDEN\" INTEGER," + // 1: numAnden
                "\"USE_TIME\" INTEGER," + // 2: useTime
                "\"TOTAL_TIME\" INTEGER," + // 3: totalTime
                "\"USE_PERCENTAGE\" REAL," + // 4: usePercentage
                "\"PALLETS_SUM\" INTEGER," + // 5: palletsSum
                "\"TIMETABLE_INFO_ID\" INTEGER NOT NULL );"); // 6: timetableInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UTILIZATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Utilization entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer numAnden = entity.getNumAnden();
        if (numAnden != null) {
            stmt.bindLong(2, numAnden);
        }
 
        Integer useTime = entity.getUseTime();
        if (useTime != null) {
            stmt.bindLong(3, useTime);
        }
 
        Integer totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindLong(4, totalTime);
        }
 
        Float usePercentage = entity.getUsePercentage();
        if (usePercentage != null) {
            stmt.bindDouble(5, usePercentage);
        }
 
        Integer palletsSum = entity.getPalletsSum();
        if (palletsSum != null) {
            stmt.bindLong(6, palletsSum);
        }
        stmt.bindLong(7, entity.getTimetableInfoId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Utilization readEntity(Cursor cursor, int offset) {
        Utilization entity = new Utilization( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // numAnden
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // useTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // totalTime
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // usePercentage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // palletsSum
            cursor.getLong(offset + 6) // timetableInfoId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Utilization entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumAnden(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUseTime(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTotalTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUsePercentage(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setPalletsSum(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTimetableInfoId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Utilization entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Utilization entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "utilizations" to-many relationship of TimetableInfo. */
    public List<Utilization> _queryTimetableInfo_Utilizations(long timetableInfoId) {
        synchronized (this) {
            if (timetableInfo_UtilizationsQuery == null) {
                QueryBuilder<Utilization> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TimetableInfoId.eq(null));
                timetableInfo_UtilizationsQuery = queryBuilder.build();
            }
        }
        Query<Utilization> query = timetableInfo_UtilizationsQuery.forCurrentThread();
        query.setParameter(0, timetableInfoId);
        return query.list();
    }

}
