package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "INPUT_TRANSFERENCE".
 */
public class InputTransference extends EqualsBase  {

    private Long id;
    private java.util.Date date;
    private short type;
    private int folio;
    private long regionId;
    private long storeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient InputTransferenceDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Store store;
    private Long store__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public InputTransference() {
    }

    public InputTransference(Long id) {
        this.id = id;
    }

    public InputTransference(Long id, java.util.Date date, short type, int folio, long regionId, long storeId) {
        this.id = id;
        this.date = date;
        this.type = type;
        this.folio = folio;
        this.regionId = regionId;
        this.storeId = storeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInputTransferenceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public short getType() {
        return type;
    }

    public void setType(short type) {
        this.type = type;
    }

    public int getFolio() {
        return folio;
    }

    public void setFolio(int folio) {
        this.folio = folio;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getStoreId() {
        return storeId;
    }

    public void setStoreId(long storeId) {
        this.storeId = storeId;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Store getStore() {
        long __key = this.storeId;
        if (store__resolvedKey == null || !store__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store storeNew = targetDao.load(__key);
            synchronized (this) {
                store = storeNew;
            	store__resolvedKey = __key;
            }
        }
        return store;
    }

    public void setStore(Store store) {
        if (store == null) {
            throw new DaoException("To-one property 'storeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.store = store;
            storeId = store.getId();
            store__resolvedKey = storeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
