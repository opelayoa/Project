package com.tiendas3b.almacen.db.dao;

import java.util.List;
import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "BUY".
 */
public class Buy extends EqualsBase  {

    private Long id;
    private Double total;
    private java.util.Date programedDate;
    private Integer platform;
    private String time;
    private Boolean express;
    private String deliveryTime;
    private int checked;
    private long regionId;
    private long providerId;
    private int folio;
    /** Not-null value. */
    private String mov;
    private int forced;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BuyDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Provider provider;
    private Long provider__resolvedKey;

    private List<BuyDetail> buyDetails;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Buy() {
    }

    public Buy(Long id) {
        this.id = id;
    }

    public Buy(Long id, Double total, java.util.Date programedDate, Integer platform, String time, Boolean express, String deliveryTime, int checked, long regionId, long providerId, int folio, String mov, int forced) {
        this.id = id;
        this.total = total;
        this.programedDate = programedDate;
        this.platform = platform;
        this.time = time;
        this.express = express;
        this.deliveryTime = deliveryTime;
        this.checked = checked;
        this.regionId = regionId;
        this.providerId = providerId;
        this.folio = folio;
        this.mov = mov;
        this.forced = forced;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBuyDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getTotal() {
        return total;
    }

    public void setTotal(Double total) {
        this.total = total;
    }

    public java.util.Date getProgramedDate() {
        return programedDate;
    }

    public void setProgramedDate(java.util.Date programedDate) {
        this.programedDate = programedDate;
    }

    public Integer getPlatform() {
        return platform;
    }

    public void setPlatform(Integer platform) {
        this.platform = platform;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public Boolean getExpress() {
        return express;
    }

    public void setExpress(Boolean express) {
        this.express = express;
    }

    public String getDeliveryTime() {
        return deliveryTime;
    }

    public void setDeliveryTime(String deliveryTime) {
        this.deliveryTime = deliveryTime;
    }

    public int getChecked() {
        return checked;
    }

    public void setChecked(int checked) {
        this.checked = checked;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getProviderId() {
        return providerId;
    }

    public void setProviderId(long providerId) {
        this.providerId = providerId;
    }

    public int getFolio() {
        return folio;
    }

    public void setFolio(int folio) {
        this.folio = folio;
    }

    /** Not-null value. */
    public String getMov() {
        return mov;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMov(String mov) {
        this.mov = mov;
    }

    public int getForced() {
        return forced;
    }

    public void setForced(int forced) {
        this.forced = forced;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Provider getProvider() {
        long __key = this.providerId;
        if (provider__resolvedKey == null || !provider__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProviderDao targetDao = daoSession.getProviderDao();
            Provider providerNew = targetDao.load(__key);
            synchronized (this) {
                provider = providerNew;
            	provider__resolvedKey = __key;
            }
        }
        return provider;
    }

    public void setProvider(Provider provider) {
        if (provider == null) {
            throw new DaoException("To-one property 'providerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.provider = provider;
            providerId = provider.getId();
            provider__resolvedKey = providerId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<BuyDetail> getBuyDetails() {
        if (buyDetails == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BuyDetailDao targetDao = daoSession.getBuyDetailDao();
            List<BuyDetail> buyDetailsNew = targetDao._queryBuy_BuyDetails(id);
            synchronized (this) {
                if(buyDetails == null) {
                    buyDetails = buyDetailsNew;
                }
            }
        }
        return buyDetails;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBuyDetails() {
        buyDetails = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
