package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PENDING_DOCUMENT_DETAIL".
 */
public class PendingDocumentDetail extends EqualsBase  {

    private Long id;
    private Integer amount;
    private Integer stores;
    private Integer events;
    /** Not-null value. */
    private String type;
    private long pendingDocumentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PendingDocumentDetailDao myDao;

    private PendingDocument pendingDocument;
    private Long pendingDocument__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PendingDocumentDetail() {
    }

    public PendingDocumentDetail(Long id) {
        this.id = id;
    }

    public PendingDocumentDetail(Long id, Integer amount, Integer stores, Integer events, String type, long pendingDocumentId) {
        this.id = id;
        this.amount = amount;
        this.stores = stores;
        this.events = events;
        this.type = type;
        this.pendingDocumentId = pendingDocumentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPendingDocumentDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getAmount() {
        return amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public Integer getStores() {
        return stores;
    }

    public void setStores(Integer stores) {
        this.stores = stores;
    }

    public Integer getEvents() {
        return events;
    }

    public void setEvents(Integer events) {
        this.events = events;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public long getPendingDocumentId() {
        return pendingDocumentId;
    }

    public void setPendingDocumentId(long pendingDocumentId) {
        this.pendingDocumentId = pendingDocumentId;
    }

    /** To-one relationship, resolved on first access. */
    public PendingDocument getPendingDocument() {
        long __key = this.pendingDocumentId;
        if (pendingDocument__resolvedKey == null || !pendingDocument__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PendingDocumentDao targetDao = daoSession.getPendingDocumentDao();
            PendingDocument pendingDocumentNew = targetDao.load(__key);
            synchronized (this) {
                pendingDocument = pendingDocumentNew;
            	pendingDocument__resolvedKey = __key;
            }
        }
        return pendingDocument;
    }

    public void setPendingDocument(PendingDocument pendingDocument) {
        if (pendingDocument == null) {
            throw new DaoException("To-one property 'pendingDocumentId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.pendingDocument = pendingDocument;
            pendingDocumentId = pendingDocument.getId();
            pendingDocument__resolvedKey = pendingDocumentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
