package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.ReceiptExpressLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIPT_EXPRESS_LOG".
*/
public class ReceiptExpressLogDao extends AbstractDao<ReceiptExpressLog, Void> {

    public static final String TABLENAME = "RECEIPT_EXPRESS_LOG";

    /**
     * Properties of entity ReceiptExpressLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdAlmacen = new Property(0, String.class, "idAlmacen", false, "ID_ALMACEN");
        public final static Property IdProveedor = new Property(1, Long.class, "idProveedor", false, "ID_PROVEEDOR");
        public final static Property Odc = new Property(2, Integer.class, "odc", false, "ODC");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property IdOrden = new Property(5, Integer.class, "idOrden", false, "ID_ORDEN");
        public final static Property IdProcess = new Property(6, Integer.class, "idProcess", false, "ID_PROCESS");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property User = new Property(8, String.class, "user", false, "USER");
    };


    public ReceiptExpressLogDao(DaoConfig config) {
        super(config);
    }
    
    public ReceiptExpressLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIPT_EXPRESS_LOG\" (" + //
                "\"ID_ALMACEN\" TEXT," + // 0: idAlmacen
                "\"ID_PROVEEDOR\" INTEGER," + // 1: idProveedor
                "\"ODC\" INTEGER," + // 2: odc
                "\"DATE\" TEXT," + // 3: date
                "\"TIME\" TEXT," + // 4: time
                "\"ID_ORDEN\" INTEGER," + // 5: idOrden
                "\"ID_PROCESS\" INTEGER," + // 6: idProcess
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"USER\" TEXT);"); // 8: user
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIPT_EXPRESS_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReceiptExpressLog entity) {
        stmt.clearBindings();
 
        String idAlmacen = entity.getIdAlmacen();
        if (idAlmacen != null) {
            stmt.bindString(1, idAlmacen);
        }
 
        Long idProveedor = entity.getIdProveedor();
        if (idProveedor != null) {
            stmt.bindLong(2, idProveedor);
        }
 
        Integer odc = entity.getOdc();
        if (odc != null) {
            stmt.bindLong(3, odc);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        Integer idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindLong(6, idOrden);
        }
 
        Integer idProcess = entity.getIdProcess();
        if (idProcess != null) {
            stmt.bindLong(7, idProcess);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(9, user);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ReceiptExpressLog readEntity(Cursor cursor, int offset) {
        ReceiptExpressLog entity = new ReceiptExpressLog( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // idAlmacen
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idProveedor
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // odc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // idOrden
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // idProcess
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // user
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReceiptExpressLog entity, int offset) {
        entity.setIdAlmacen(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIdProveedor(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOdc(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdOrden(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIdProcess(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ReceiptExpressLog entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ReceiptExpressLog entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
