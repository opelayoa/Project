package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.RoadmapDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROADMAP_DETAIL".
*/
public class RoadmapDetailDao extends AbstractDao<RoadmapDetail, Long> {

    public static final String TABLENAME = "ROADMAP_DETAIL";

    /**
     * Properties of entity RoadmapDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EndDate = new Property(1, String.class, "endDate", false, "END_DATE");
        public final static Property ScaffoldUpload = new Property(2, Integer.class, "scaffoldUpload", false, "SCAFFOLD_UPLOAD");
        public final static Property ScaffoldDownload = new Property(3, Integer.class, "scaffoldDownload", false, "SCAFFOLD_DOWNLOAD");
        public final static Property InitialKm = new Property(4, int.class, "initialKm", false, "INITIAL_KM");
        public final static Property FinalKm = new Property(5, int.class, "finalKm", false, "FINAL_KM");
        public final static Property InitialTime = new Property(6, String.class, "initialTime", false, "INITIAL_TIME");
        public final static Property FinalTime = new Property(7, String.class, "finalTime", false, "FINAL_TIME");
        public final static Property Cash = new Property(8, Float.class, "cash", false, "CASH");
        public final static Property Iave = new Property(9, Float.class, "iave", false, "IAVE");
        public final static Property Diesel = new Property(10, Float.class, "diesel", false, "DIESEL");
        public final static Property TrafficTicket = new Property(11, Float.class, "trafficTicket", false, "TRAFFIC_TICKET");
        public final static Property OtherCost = new Property(12, Float.class, "otherCost", false, "OTHER_COST");
        public final static Property Notes = new Property(13, String.class, "notes", false, "NOTES");
        public final static Property Sync = new Property(14, boolean.class, "sync", false, "SYNC");
        public final static Property OriginId = new Property(15, long.class, "originId", false, "ORIGIN_ID");
        public final static Property DestinationId = new Property(16, long.class, "destinationId", false, "DESTINATION_ID");
        public final static Property ActiviyId = new Property(17, long.class, "activiyId", false, "ACTIVIY_ID");
        public final static Property RoadmapId = new Property(18, long.class, "roadmapId", false, "ROADMAP_ID");
    };

    private DaoSession daoSession;

    private Query<RoadmapDetail> roadmap_ActivitiesQuery;

    public RoadmapDetailDao(DaoConfig config) {
        super(config);
    }
    
    public RoadmapDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROADMAP_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"END_DATE\" TEXT NOT NULL ," + // 1: endDate
                "\"SCAFFOLD_UPLOAD\" INTEGER," + // 2: scaffoldUpload
                "\"SCAFFOLD_DOWNLOAD\" INTEGER," + // 3: scaffoldDownload
                "\"INITIAL_KM\" INTEGER NOT NULL ," + // 4: initialKm
                "\"FINAL_KM\" INTEGER NOT NULL ," + // 5: finalKm
                "\"INITIAL_TIME\" TEXT NOT NULL ," + // 6: initialTime
                "\"FINAL_TIME\" TEXT NOT NULL ," + // 7: finalTime
                "\"CASH\" REAL," + // 8: cash
                "\"IAVE\" REAL," + // 9: iave
                "\"DIESEL\" REAL," + // 10: diesel
                "\"TRAFFIC_TICKET\" REAL," + // 11: trafficTicket
                "\"OTHER_COST\" REAL," + // 12: otherCost
                "\"NOTES\" TEXT," + // 13: notes
                "\"SYNC\" INTEGER NOT NULL ," + // 14: sync
                "\"ORIGIN_ID\" INTEGER NOT NULL ," + // 15: originId
                "\"DESTINATION_ID\" INTEGER NOT NULL ," + // 16: destinationId
                "\"ACTIVIY_ID\" INTEGER NOT NULL ," + // 17: activiyId
                "\"ROADMAP_ID\" INTEGER NOT NULL );"); // 18: roadmapId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ROADMAP_DETAIL_ROADMAP_ID_ACTIVIY_ID_ORIGIN_ID_DESTINATION_ID ON ROADMAP_DETAIL" +
                " (\"ROADMAP_ID\",\"ACTIVIY_ID\",\"ORIGIN_ID\",\"DESTINATION_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROADMAP_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RoadmapDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEndDate());
 
        Integer scaffoldUpload = entity.getScaffoldUpload();
        if (scaffoldUpload != null) {
            stmt.bindLong(3, scaffoldUpload);
        }
 
        Integer scaffoldDownload = entity.getScaffoldDownload();
        if (scaffoldDownload != null) {
            stmt.bindLong(4, scaffoldDownload);
        }
        stmt.bindLong(5, entity.getInitialKm());
        stmt.bindLong(6, entity.getFinalKm());
        stmt.bindString(7, entity.getInitialTime());
        stmt.bindString(8, entity.getFinalTime());
 
        Float cash = entity.getCash();
        if (cash != null) {
            stmt.bindDouble(9, cash);
        }
 
        Float iave = entity.getIave();
        if (iave != null) {
            stmt.bindDouble(10, iave);
        }
 
        Float diesel = entity.getDiesel();
        if (diesel != null) {
            stmt.bindDouble(11, diesel);
        }
 
        Float trafficTicket = entity.getTrafficTicket();
        if (trafficTicket != null) {
            stmt.bindDouble(12, trafficTicket);
        }
 
        Float otherCost = entity.getOtherCost();
        if (otherCost != null) {
            stmt.bindDouble(13, otherCost);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(14, notes);
        }
        stmt.bindLong(15, entity.getSync() ? 1L: 0L);
        stmt.bindLong(16, entity.getOriginId());
        stmt.bindLong(17, entity.getDestinationId());
        stmt.bindLong(18, entity.getActiviyId());
        stmt.bindLong(19, entity.getRoadmapId());
    }

    @Override
    protected void attachEntity(RoadmapDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RoadmapDetail readEntity(Cursor cursor, int offset) {
        RoadmapDetail entity = new RoadmapDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // endDate
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // scaffoldUpload
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // scaffoldDownload
            cursor.getInt(offset + 4), // initialKm
            cursor.getInt(offset + 5), // finalKm
            cursor.getString(offset + 6), // initialTime
            cursor.getString(offset + 7), // finalTime
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // cash
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // iave
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // diesel
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // trafficTicket
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // otherCost
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // notes
            cursor.getShort(offset + 14) != 0, // sync
            cursor.getLong(offset + 15), // originId
            cursor.getLong(offset + 16), // destinationId
            cursor.getLong(offset + 17), // activiyId
            cursor.getLong(offset + 18) // roadmapId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RoadmapDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEndDate(cursor.getString(offset + 1));
        entity.setScaffoldUpload(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setScaffoldDownload(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setInitialKm(cursor.getInt(offset + 4));
        entity.setFinalKm(cursor.getInt(offset + 5));
        entity.setInitialTime(cursor.getString(offset + 6));
        entity.setFinalTime(cursor.getString(offset + 7));
        entity.setCash(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setIave(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setDiesel(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setTrafficTicket(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setOtherCost(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setNotes(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSync(cursor.getShort(offset + 14) != 0);
        entity.setOriginId(cursor.getLong(offset + 15));
        entity.setDestinationId(cursor.getLong(offset + 16));
        entity.setActiviyId(cursor.getLong(offset + 17));
        entity.setRoadmapId(cursor.getLong(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RoadmapDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RoadmapDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "activities" to-many relationship of Roadmap. */
    public List<RoadmapDetail> _queryRoadmap_Activities(long roadmapId) {
        synchronized (this) {
            if (roadmap_ActivitiesQuery == null) {
                QueryBuilder<RoadmapDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoadmapId.eq(null));
                roadmap_ActivitiesQuery = queryBuilder.build();
            }
        }
        Query<RoadmapDetail> query = roadmap_ActivitiesQuery.forCurrentThread();
        query.setParameter(0, roadmapId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getStoreDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getStoreDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getActivityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getRoadmapDao().getAllColumns());
            builder.append(" FROM ROADMAP_DETAIL T");
            builder.append(" LEFT JOIN STORE T0 ON T.\"ORIGIN_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN STORE T1 ON T.\"DESTINATION_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN ACTIVITY T2 ON T.\"ACTIVIY_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN ROADMAP T3 ON T.\"ROADMAP_ID\"=T3.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RoadmapDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        RoadmapDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Store origin = loadCurrentOther(daoSession.getStoreDao(), cursor, offset);
         if(origin != null) {
            entity.setOrigin(origin);
        }
        offset += daoSession.getStoreDao().getAllColumns().length;

        Store destination = loadCurrentOther(daoSession.getStoreDao(), cursor, offset);
         if(destination != null) {
            entity.setDestination(destination);
        }
        offset += daoSession.getStoreDao().getAllColumns().length;

        Activity activity = loadCurrentOther(daoSession.getActivityDao(), cursor, offset);
         if(activity != null) {
            entity.setActivity(activity);
        }
        offset += daoSession.getActivityDao().getAllColumns().length;

        Roadmap roadmap = loadCurrentOther(daoSession.getRoadmapDao(), cursor, offset);
         if(roadmap != null) {
            entity.setRoadmap(roadmap);
        }

        return entity;    
    }

    public RoadmapDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RoadmapDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RoadmapDetail> list = new ArrayList<RoadmapDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RoadmapDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RoadmapDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
