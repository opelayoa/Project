package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.StorePickingStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE_PICKING_STATUS".
*/
public class StorePickingStatusDao extends AbstractDao<StorePickingStatus, Long> {

    public static final String TABLENAME = "STORE_PICKING_STATUS";

    /**
     * Properties of entity StorePickingStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PickDate = new Property(1, String.class, "pickDate", false, "PICK_DATE");
        public final static Property BillSmn = new Property(2, int.class, "billSmn", false, "BILL_SMN");
        public final static Property OtroiSmn = new Property(3, int.class, "otroiSmn", false, "OTROI_SMN");
        public final static Property Alias = new Property(4, String.class, "alias", false, "ALIAS");
        public final static Property Ftp = new Property(5, Boolean.class, "ftp", false, "FTP");
        public final static Property OrderDate = new Property(6, String.class, "orderDate", false, "ORDER_DATE");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property StoreId = new Property(8, long.class, "storeId", false, "STORE_ID");
        public final static Property RegionId = new Property(9, long.class, "regionId", false, "REGION_ID");
    };

    private DaoSession daoSession;


    public StorePickingStatusDao(DaoConfig config) {
        super(config);
    }
    
    public StorePickingStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_PICKING_STATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PICK_DATE\" TEXT NOT NULL ," + // 1: pickDate
                "\"BILL_SMN\" INTEGER NOT NULL ," + // 2: billSmn
                "\"OTROI_SMN\" INTEGER NOT NULL ," + // 3: otroiSmn
                "\"ALIAS\" TEXT NOT NULL ," + // 4: alias
                "\"FTP\" INTEGER," + // 5: ftp
                "\"ORDER_DATE\" TEXT," + // 6: orderDate
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"STORE_ID\" INTEGER NOT NULL ," + // 8: storeId
                "\"REGION_ID\" INTEGER NOT NULL );"); // 9: regionId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_STORE_PICKING_STATUS_REGION_ID_STORE_ID_OTROI_SMN ON STORE_PICKING_STATUS" +
                " (\"REGION_ID\",\"STORE_ID\",\"OTROI_SMN\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_PICKING_STATUS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StorePickingStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPickDate());
        stmt.bindLong(3, entity.getBillSmn());
        stmt.bindLong(4, entity.getOtroiSmn());
        stmt.bindString(5, entity.getAlias());
 
        Boolean ftp = entity.getFtp();
        if (ftp != null) {
            stmt.bindLong(6, ftp ? 1L: 0L);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(7, orderDate);
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindLong(9, entity.getStoreId());
        stmt.bindLong(10, entity.getRegionId());
    }

    @Override
    protected void attachEntity(StorePickingStatus entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StorePickingStatus readEntity(Cursor cursor, int offset) {
        StorePickingStatus entity = new StorePickingStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // pickDate
            cursor.getInt(offset + 2), // billSmn
            cursor.getInt(offset + 3), // otroiSmn
            cursor.getString(offset + 4), // alias
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // ftp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderDate
            cursor.getInt(offset + 7), // status
            cursor.getLong(offset + 8), // storeId
            cursor.getLong(offset + 9) // regionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StorePickingStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPickDate(cursor.getString(offset + 1));
        entity.setBillSmn(cursor.getInt(offset + 2));
        entity.setOtroiSmn(cursor.getInt(offset + 3));
        entity.setAlias(cursor.getString(offset + 4));
        entity.setFtp(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setOrderDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setStoreId(cursor.getLong(offset + 8));
        entity.setRegionId(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StorePickingStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StorePickingStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getStoreDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRegionDao().getAllColumns());
            builder.append(" FROM STORE_PICKING_STATUS T");
            builder.append(" LEFT JOIN STORE T0 ON T.\"STORE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN REGION T1 ON T.\"REGION_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StorePickingStatus loadCurrentDeep(Cursor cursor, boolean lock) {
        StorePickingStatus entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Store store = loadCurrentOther(daoSession.getStoreDao(), cursor, offset);
         if(store != null) {
            entity.setStore(store);
        }
        offset += daoSession.getStoreDao().getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }

        return entity;    
    }

    public StorePickingStatus loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StorePickingStatus> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StorePickingStatus> list = new ArrayList<StorePickingStatus>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StorePickingStatus> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StorePickingStatus> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
