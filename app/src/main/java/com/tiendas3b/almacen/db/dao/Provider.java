package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PROVIDER".
 */
public class Provider extends EqualsBase  {

    private Long id;
    private String name;
    private String businessName;
    private String rfc;
    private String phone1;
    private String phone2;
    private String mail;
    private String atention;
    private Boolean active;
    private Short supply;
    private Short term;
    private String address;
    private long mmpConfigId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProviderDao myDao;

    private ConfigProvider mmpConfig;
    private Long mmpConfig__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Provider() {
    }

    public Provider(Long id) {
        this.id = id;
    }

    public Provider(Long id, String name, String businessName, String rfc, String phone1, String phone2, String mail, String atention, Boolean active, Short supply, Short term, String address, long mmpConfigId) {
        this.id = id;
        this.name = name;
        this.businessName = businessName;
        this.rfc = rfc;
        this.phone1 = phone1;
        this.phone2 = phone2;
        this.mail = mail;
        this.atention = atention;
        this.active = active;
        this.supply = supply;
        this.term = term;
        this.address = address;
        this.mmpConfigId = mmpConfigId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProviderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBusinessName() {
        return businessName;
    }

    public void setBusinessName(String businessName) {
        this.businessName = businessName;
    }

    public String getRfc() {
        return rfc;
    }

    public void setRfc(String rfc) {
        this.rfc = rfc;
    }

    public String getPhone1() {
        return phone1;
    }

    public void setPhone1(String phone1) {
        this.phone1 = phone1;
    }

    public String getPhone2() {
        return phone2;
    }

    public void setPhone2(String phone2) {
        this.phone2 = phone2;
    }

    public String getMail() {
        return mail;
    }

    public void setMail(String mail) {
        this.mail = mail;
    }

    public String getAtention() {
        return atention;
    }

    public void setAtention(String atention) {
        this.atention = atention;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    public Short getSupply() {
        return supply;
    }

    public void setSupply(Short supply) {
        this.supply = supply;
    }

    public Short getTerm() {
        return term;
    }

    public void setTerm(Short term) {
        this.term = term;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public long getMmpConfigId() {
        return mmpConfigId;
    }

    public void setMmpConfigId(long mmpConfigId) {
        this.mmpConfigId = mmpConfigId;
    }

    /** To-one relationship, resolved on first access. */
    public ConfigProvider getMmpConfig() {
        long __key = this.mmpConfigId;
        if (mmpConfig__resolvedKey == null || !mmpConfig__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConfigProviderDao targetDao = daoSession.getConfigProviderDao();
            ConfigProvider mmpConfigNew = targetDao.load(__key);
            synchronized (this) {
                mmpConfig = mmpConfigNew;
            	mmpConfig__resolvedKey = __key;
            }
        }
        return mmpConfig;
    }

    public void setMmpConfig(ConfigProvider mmpConfig) {
        if (mmpConfig == null) {
            throw new DaoException("To-one property 'mmpConfigId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.mmpConfig = mmpConfig;
            mmpConfigId = mmpConfig.getId();
            mmpConfig__resolvedKey = mmpConfigId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
