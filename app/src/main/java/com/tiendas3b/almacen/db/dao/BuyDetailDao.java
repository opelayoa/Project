package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.BuyDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUY_DETAIL".
*/
public class BuyDetailDao extends AbstractDao<BuyDetail, Long> {

    public static final String TABLENAME = "BUY_DETAIL";

    /**
     * Properties of entity BuyDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArticleAmount = new Property(1, Integer.class, "articleAmount", false, "ARTICLE_AMOUNT");
        public final static Property Balance = new Property(2, Integer.class, "balance", false, "BALANCE");
        public final static Property ArticleId = new Property(3, long.class, "articleId", false, "ARTICLE_ID");
        public final static Property ReceiptSheetCaptureId = new Property(4, Long.class, "receiptSheetCaptureId", false, "RECEIPT_SHEET_CAPTURE_ID");
        public final static Property BuyId = new Property(5, long.class, "buyId", false, "BUY_ID");
    };

    private DaoSession daoSession;

    private Query<BuyDetail> buy_BuyDetailsQuery;

    public BuyDetailDao(DaoConfig config) {
        super(config);
    }
    
    public BuyDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUY_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ARTICLE_AMOUNT\" INTEGER," + // 1: articleAmount
                "\"BALANCE\" INTEGER," + // 2: balance
                "\"ARTICLE_ID\" INTEGER NOT NULL ," + // 3: articleId
                "\"RECEIPT_SHEET_CAPTURE_ID\" INTEGER," + // 4: receiptSheetCaptureId
                "\"BUY_ID\" INTEGER NOT NULL );"); // 5: buyId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BUY_DETAIL_BUY_ID_ARTICLE_ID ON BUY_DETAIL" +
                " (\"BUY_ID\",\"ARTICLE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUY_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BuyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer articleAmount = entity.getArticleAmount();
        if (articleAmount != null) {
            stmt.bindLong(2, articleAmount);
        }
 
        Integer balance = entity.getBalance();
        if (balance != null) {
            stmt.bindLong(3, balance);
        }
        stmt.bindLong(4, entity.getArticleId());
 
        Long receiptSheetCaptureId = entity.getReceiptSheetCaptureId();
        if (receiptSheetCaptureId != null) {
            stmt.bindLong(5, receiptSheetCaptureId);
        }
        stmt.bindLong(6, entity.getBuyId());
    }

    @Override
    protected void attachEntity(BuyDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BuyDetail readEntity(Cursor cursor, int offset) {
        BuyDetail entity = new BuyDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // articleAmount
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // balance
            cursor.getLong(offset + 3), // articleId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // receiptSheetCaptureId
            cursor.getLong(offset + 5) // buyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BuyDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleAmount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBalance(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setArticleId(cursor.getLong(offset + 3));
        entity.setReceiptSheetCaptureId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setBuyId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BuyDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BuyDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "buyDetails" to-many relationship of Buy. */
    public List<BuyDetail> _queryBuy_BuyDetails(long buyId) {
        synchronized (this) {
            if (buy_BuyDetailsQuery == null) {
                QueryBuilder<BuyDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BuyId.eq(null));
                buy_BuyDetailsQuery = queryBuilder.build();
            }
        }
        Query<BuyDetail> query = buy_BuyDetailsQuery.forCurrentThread();
        query.setParameter(0, buyId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getVArticleDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getReceiptSheetDetailCaptureDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBuyDao().getAllColumns());
            builder.append(" FROM BUY_DETAIL T");
            builder.append(" LEFT JOIN VARTICLE T0 ON T.\"ARTICLE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN RECEIPT_SHEET_DETAIL_CAPTURE T1 ON T.\"RECEIPT_SHEET_CAPTURE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN BUY T2 ON T.\"BUY_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BuyDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        BuyDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        VArticle article = loadCurrentOther(daoSession.getVArticleDao(), cursor, offset);
         if(article != null) {
            entity.setArticle(article);
        }
        offset += daoSession.getVArticleDao().getAllColumns().length;

        ReceiptSheetDetailCapture receiptSheetCapture = loadCurrentOther(daoSession.getReceiptSheetDetailCaptureDao(), cursor, offset);
        entity.setReceiptSheetCapture(receiptSheetCapture);
        offset += daoSession.getReceiptSheetDetailCaptureDao().getAllColumns().length;

        Buy Buy = loadCurrentOther(daoSession.getBuyDao(), cursor, offset);
         if(Buy != null) {
            entity.setBuy(Buy);
        }

        return entity;    
    }

    public BuyDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BuyDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BuyDetail> list = new ArrayList<BuyDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BuyDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BuyDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
