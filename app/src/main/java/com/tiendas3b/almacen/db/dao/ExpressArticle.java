package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "EXPRESS_ARTICLE".
 */
public class ExpressArticle extends EqualsBase  {

    private Long id;
    private String description;
    private String unity;
    private String articleType;
    private String palletType;
    private Integer iclave;
    private Integer odc;
    private Integer piecesOdc;
    private Integer boxesOdc;
    private Integer palletsOdc;
    private Integer piecesAsn;
    private Integer boxesAsn;
    private Integer palletsAsn;
    private Integer piecesEm;
    private Integer boxesEm;
    private Integer palletsEm;
    private Integer piecesBill;
    private Integer boxesBill;
    private Integer palletsBill;
    private Integer piecesByBox;
    private Integer boxesByBed;
    private Integer bedByPallet;
    private Integer boxesByPallet;
    private Integer lastPallet;
    private Integer folioEm;
    private long regionId;
    private long providerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ExpressArticleDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Provider provider;
    private Long provider__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ExpressArticle() {
    }

    public ExpressArticle(Long id) {
        this.id = id;
    }

    public ExpressArticle(Long id, String description, String unity, String articleType, String palletType, Integer iclave, Integer odc, Integer piecesOdc, Integer boxesOdc, Integer palletsOdc, Integer piecesAsn, Integer boxesAsn, Integer palletsAsn, Integer piecesEm, Integer boxesEm, Integer palletsEm, Integer piecesBill, Integer boxesBill, Integer palletsBill, Integer piecesByBox, Integer boxesByBed, Integer bedByPallet, Integer boxesByPallet, Integer lastPallet, Integer folioEm, long regionId, long providerId) {
        this.id = id;
        this.description = description;
        this.unity = unity;
        this.articleType = articleType;
        this.palletType = palletType;
        this.iclave = iclave;
        this.odc = odc;
        this.piecesOdc = piecesOdc;
        this.boxesOdc = boxesOdc;
        this.palletsOdc = palletsOdc;
        this.piecesAsn = piecesAsn;
        this.boxesAsn = boxesAsn;
        this.palletsAsn = palletsAsn;
        this.piecesEm = piecesEm;
        this.boxesEm = boxesEm;
        this.palletsEm = palletsEm;
        this.piecesBill = piecesBill;
        this.boxesBill = boxesBill;
        this.palletsBill = palletsBill;
        this.piecesByBox = piecesByBox;
        this.boxesByBed = boxesByBed;
        this.bedByPallet = bedByPallet;
        this.boxesByPallet = boxesByPallet;
        this.lastPallet = lastPallet;
        this.folioEm = folioEm;
        this.regionId = regionId;
        this.providerId = providerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getExpressArticleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getUnity() {
        return unity;
    }

    public void setUnity(String unity) {
        this.unity = unity;
    }

    public String getArticleType() {
        return articleType;
    }

    public void setArticleType(String articleType) {
        this.articleType = articleType;
    }

    public String getPalletType() {
        return palletType;
    }

    public void setPalletType(String palletType) {
        this.palletType = palletType;
    }

    public Integer getIclave() {
        return iclave;
    }

    public void setIclave(Integer iclave) {
        this.iclave = iclave;
    }

    public Integer getOdc() {
        return odc;
    }

    public void setOdc(Integer odc) {
        this.odc = odc;
    }

    public Integer getPiecesOdc() {
        return piecesOdc;
    }

    public void setPiecesOdc(Integer piecesOdc) {
        this.piecesOdc = piecesOdc;
    }

    public Integer getBoxesOdc() {
        return boxesOdc;
    }

    public void setBoxesOdc(Integer boxesOdc) {
        this.boxesOdc = boxesOdc;
    }

    public Integer getPalletsOdc() {
        return palletsOdc;
    }

    public void setPalletsOdc(Integer palletsOdc) {
        this.palletsOdc = palletsOdc;
    }

    public Integer getPiecesAsn() {
        return piecesAsn;
    }

    public void setPiecesAsn(Integer piecesAsn) {
        this.piecesAsn = piecesAsn;
    }

    public Integer getBoxesAsn() {
        return boxesAsn;
    }

    public void setBoxesAsn(Integer boxesAsn) {
        this.boxesAsn = boxesAsn;
    }

    public Integer getPalletsAsn() {
        return palletsAsn;
    }

    public void setPalletsAsn(Integer palletsAsn) {
        this.palletsAsn = palletsAsn;
    }

    public Integer getPiecesEm() {
        return piecesEm;
    }

    public void setPiecesEm(Integer piecesEm) {
        this.piecesEm = piecesEm;
    }

    public Integer getBoxesEm() {
        return boxesEm;
    }

    public void setBoxesEm(Integer boxesEm) {
        this.boxesEm = boxesEm;
    }

    public Integer getPalletsEm() {
        return palletsEm;
    }

    public void setPalletsEm(Integer palletsEm) {
        this.palletsEm = palletsEm;
    }

    public Integer getPiecesBill() {
        return piecesBill;
    }

    public void setPiecesBill(Integer piecesBill) {
        this.piecesBill = piecesBill;
    }

    public Integer getBoxesBill() {
        return boxesBill;
    }

    public void setBoxesBill(Integer boxesBill) {
        this.boxesBill = boxesBill;
    }

    public Integer getPalletsBill() {
        return palletsBill;
    }

    public void setPalletsBill(Integer palletsBill) {
        this.palletsBill = palletsBill;
    }

    public Integer getPiecesByBox() {
        return piecesByBox;
    }

    public void setPiecesByBox(Integer piecesByBox) {
        this.piecesByBox = piecesByBox;
    }

    public Integer getBoxesByBed() {
        return boxesByBed;
    }

    public void setBoxesByBed(Integer boxesByBed) {
        this.boxesByBed = boxesByBed;
    }

    public Integer getBedByPallet() {
        return bedByPallet;
    }

    public void setBedByPallet(Integer bedByPallet) {
        this.bedByPallet = bedByPallet;
    }

    public Integer getBoxesByPallet() {
        return boxesByPallet;
    }

    public void setBoxesByPallet(Integer boxesByPallet) {
        this.boxesByPallet = boxesByPallet;
    }

    public Integer getLastPallet() {
        return lastPallet;
    }

    public void setLastPallet(Integer lastPallet) {
        this.lastPallet = lastPallet;
    }

    public Integer getFolioEm() {
        return folioEm;
    }

    public void setFolioEm(Integer folioEm) {
        this.folioEm = folioEm;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getProviderId() {
        return providerId;
    }

    public void setProviderId(long providerId) {
        this.providerId = providerId;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Provider getProvider() {
        long __key = this.providerId;
        if (provider__resolvedKey == null || !provider__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProviderDao targetDao = daoSession.getProviderDao();
            Provider providerNew = targetDao.load(__key);
            synchronized (this) {
                provider = providerNew;
            	provider__resolvedKey = __key;
            }
        }
        return provider;
    }

    public void setProvider(Provider provider) {
        if (provider == null) {
            throw new DaoException("To-one property 'providerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.provider = provider;
            providerId = provider.getId();
            provider__resolvedKey = providerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
