package com.tiendas3b.almacen.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.FormAppliedResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM_APPLIED_RESULT".
*/
public class FormAppliedResultDao extends AbstractDao<FormAppliedResult, Void> {

    public static final String TABLENAME = "FORM_APPLIED_RESULT";

    /**
     * Properties of entity FormAppliedResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FormAppliedId = new Property(0, long.class, "formAppliedId", false, "FORM_APPLIED_ID");
        public final static Property QuestionId = new Property(1, long.class, "questionId", false, "QUESTION_ID");
        public final static Property AnswerId = new Property(2, long.class, "answerId", false, "ANSWER_ID");
    };

    private Query<FormAppliedResult> formApplied_FormAppliedResultListQuery;

    public FormAppliedResultDao(DaoConfig config) {
        super(config);
    }
    
    public FormAppliedResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM_APPLIED_RESULT\" (" + //
                "\"FORM_APPLIED_ID\" INTEGER NOT NULL ," + // 0: formAppliedId
                "\"QUESTION_ID\" INTEGER NOT NULL ," + // 1: questionId
                "\"ANSWER_ID\" INTEGER NOT NULL );"); // 2: answerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM_APPLIED_RESULT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FormAppliedResult entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFormAppliedId());
        stmt.bindLong(2, entity.getQuestionId());
        stmt.bindLong(3, entity.getAnswerId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FormAppliedResult readEntity(Cursor cursor, int offset) {
        FormAppliedResult entity = new FormAppliedResult( //
            cursor.getLong(offset + 0), // formAppliedId
            cursor.getLong(offset + 1), // questionId
            cursor.getLong(offset + 2) // answerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FormAppliedResult entity, int offset) {
        entity.setFormAppliedId(cursor.getLong(offset + 0));
        entity.setQuestionId(cursor.getLong(offset + 1));
        entity.setAnswerId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FormAppliedResult entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FormAppliedResult entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "formAppliedResultList" to-many relationship of FormApplied. */
    public List<FormAppliedResult> _queryFormApplied_FormAppliedResultList(long formAppliedId) {
        synchronized (this) {
            if (formApplied_FormAppliedResultListQuery == null) {
                QueryBuilder<FormAppliedResult> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FormAppliedId.eq(null));
                formApplied_FormAppliedResultListQuery = queryBuilder.build();
            }
        }
        Query<FormAppliedResult> query = formApplied_FormAppliedResultListQuery.forCurrentThread();
        query.setParameter(0, formAppliedId);
        return query.list();
    }

}
