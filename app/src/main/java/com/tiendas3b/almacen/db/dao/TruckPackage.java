package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TRUCK_PACKAGE".
 */
public class TruckPackage extends EqualsBase  {

    private Long id;
    private Integer status;
    private long truckId;
    private long packageId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TruckPackageDao myDao;

    private EpackageTruck epackageTruck;
    private Long epackageTruck__resolvedKey;

    private EPackage epackage;
    private Long epackage__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TruckPackage() {
    }

    public TruckPackage(Long id) {
        this.id = id;
    }

    public TruckPackage(Long id, Integer status, long truckId, long packageId) {
        this.id = id;
        this.status = status;
        this.truckId = truckId;
        this.packageId = packageId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTruckPackageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public long getTruckId() {
        return truckId;
    }

    public void setTruckId(long truckId) {
        this.truckId = truckId;
    }

    public long getPackageId() {
        return packageId;
    }

    public void setPackageId(long packageId) {
        this.packageId = packageId;
    }

    /** To-one relationship, resolved on first access. */
    public EpackageTruck getEpackageTruck() {
        long __key = this.truckId;
        if (epackageTruck__resolvedKey == null || !epackageTruck__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EpackageTruckDao targetDao = daoSession.getEpackageTruckDao();
            EpackageTruck epackageTruckNew = targetDao.load(__key);
            synchronized (this) {
                epackageTruck = epackageTruckNew;
            	epackageTruck__resolvedKey = __key;
            }
        }
        return epackageTruck;
    }

    public void setEpackageTruck(EpackageTruck epackageTruck) {
        if (epackageTruck == null) {
            throw new DaoException("To-one property 'truckId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.epackageTruck = epackageTruck;
            truckId = epackageTruck.getId();
            epackageTruck__resolvedKey = truckId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public EPackage getEpackage() {
        long __key = this.packageId;
        if (epackage__resolvedKey == null || !epackage__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EPackageDao targetDao = daoSession.getEPackageDao();
            EPackage epackageNew = targetDao.load(__key);
            synchronized (this) {
                epackage = epackageNew;
            	epackage__resolvedKey = __key;
            }
        }
        return epackage;
    }

    public void setEpackage(EPackage epackage) {
        if (epackage == null) {
            throw new DaoException("To-one property 'packageId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.epackage = epackage;
            packageId = epackage.getId();
            epackage__resolvedKey = packageId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
