package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.ReceiptComments;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIPT_COMMENTS".
*/
public class ReceiptCommentsDao extends AbstractDao<ReceiptComments, Void> {

    public static final String TABLENAME = "RECEIPT_COMMENTS";

    /**
     * Properties of entity ReceiptComments.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tclave = new Property(0, Long.class, "tclave", false, "TCLAVE");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Pclave = new Property(2, Long.class, "pclave", false, "PCLAVE");
        public final static Property Odc = new Property(3, Integer.class, "odc", false, "ODC");
        public final static Property UserId = new Property(4, Integer.class, "userId", false, "USER_ID");
        public final static Property Comments = new Property(5, String.class, "comments", false, "COMMENTS");
    };


    public ReceiptCommentsDao(DaoConfig config) {
        super(config);
    }
    
    public ReceiptCommentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIPT_COMMENTS\" (" + //
                "\"TCLAVE\" INTEGER," + // 0: tclave
                "\"DATE\" INTEGER," + // 1: date
                "\"PCLAVE\" INTEGER," + // 2: pclave
                "\"ODC\" INTEGER," + // 3: odc
                "\"USER_ID\" INTEGER," + // 4: userId
                "\"COMMENTS\" TEXT);"); // 5: comments
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIPT_COMMENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReceiptComments entity) {
        stmt.clearBindings();
 
        Long tclave = entity.getTclave();
        if (tclave != null) {
            stmt.bindLong(1, tclave);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Long pclave = entity.getPclave();
        if (pclave != null) {
            stmt.bindLong(3, pclave);
        }
 
        Integer odc = entity.getOdc();
        if (odc != null) {
            stmt.bindLong(4, odc);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(6, comments);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ReceiptComments readEntity(Cursor cursor, int offset) {
        ReceiptComments entity = new ReceiptComments( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tclave
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // pclave
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // odc
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // comments
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReceiptComments entity, int offset) {
        entity.setTclave(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setPclave(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOdc(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setComments(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ReceiptComments entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ReceiptComments entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
