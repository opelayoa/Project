package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EmissionDateMillis = new Property(1, long.class, "emissionDateMillis", false, "EMISSION_DATE_MILLIS");
        public final static Property Lat = new Property(2, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(3, double.class, "lng", false, "LNG");
        public final static Property Accuracy = new Property(4, Float.class, "accuracy", false, "ACCURACY");
        public final static Property Provider = new Property(5, String.class, "provider", false, "PROVIDER");
        public final static Property Speed = new Property(6, Float.class, "speed", false, "SPEED");
        public final static Property Bearing = new Property(7, Float.class, "bearing", false, "BEARING");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMISSION_DATE_MILLIS\" INTEGER NOT NULL ," + // 1: emissionDateMillis
                "\"LAT\" REAL NOT NULL ," + // 2: lat
                "\"LNG\" REAL NOT NULL ," + // 3: lng
                "\"ACCURACY\" REAL," + // 4: accuracy
                "\"PROVIDER\" TEXT," + // 5: provider
                "\"SPEED\" REAL," + // 6: speed
                "\"BEARING\" REAL);"); // 7: bearing
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEmissionDateMillis());
        stmt.bindDouble(3, entity.getLat());
        stmt.bindDouble(4, entity.getLng());
 
        Float accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindDouble(5, accuracy);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(6, provider);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(7, speed);
        }
 
        Float bearing = entity.getBearing();
        if (bearing != null) {
            stmt.bindDouble(8, bearing);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // emissionDateMillis
            cursor.getDouble(offset + 2), // lat
            cursor.getDouble(offset + 3), // lng
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // accuracy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // provider
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // speed
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7) // bearing
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmissionDateMillis(cursor.getLong(offset + 1));
        entity.setLat(cursor.getDouble(offset + 2));
        entity.setLng(cursor.getDouble(offset + 3));
        entity.setAccuracy(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setProvider(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpeed(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setBearing(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
