package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.ExpressProvider;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESS_PROVIDER".
*/
public class ExpressProviderDao extends AbstractDao<ExpressProvider, Long> {

    public static final String TABLENAME = "EXPRESS_PROVIDER";

    /**
     * Properties of entity ExpressProvider.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Automatic = new Property(2, Boolean.class, "automatic", false, "AUTOMATIC");
        public final static Property Active = new Property(3, Boolean.class, "active", false, "ACTIVE");
        public final static Property Ticket = new Property(4, Boolean.class, "ticket", false, "TICKET");
        public final static Property Delivery = new Property(5, String.class, "delivery", false, "DELIVERY");
        public final static Property Unity = new Property(6, Integer.class, "unity", false, "UNITY");
        public final static Property RegionId = new Property(7, long.class, "regionId", false, "REGION_ID");
        public final static Property ProviderId = new Property(8, long.class, "providerId", false, "PROVIDER_ID");
    };

    private DaoSession daoSession;


    public ExpressProviderDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressProviderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESS_PROVIDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"AUTOMATIC\" INTEGER," + // 2: automatic
                "\"ACTIVE\" INTEGER," + // 3: active
                "\"TICKET\" INTEGER," + // 4: ticket
                "\"DELIVERY\" TEXT," + // 5: delivery
                "\"UNITY\" INTEGER," + // 6: unity
                "\"REGION_ID\" INTEGER NOT NULL ," + // 7: regionId
                "\"PROVIDER_ID\" INTEGER NOT NULL UNIQUE );"); // 8: providerId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EXPRESS_PROVIDER_REGION_ID_PROVIDER_ID ON EXPRESS_PROVIDER" +
                " (\"REGION_ID\",\"PROVIDER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESS_PROVIDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExpressProvider entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        Boolean automatic = entity.getAutomatic();
        if (automatic != null) {
            stmt.bindLong(3, automatic ? 1L: 0L);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(4, active ? 1L: 0L);
        }
 
        Boolean ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindLong(5, ticket ? 1L: 0L);
        }
 
        String delivery = entity.getDelivery();
        if (delivery != null) {
            stmt.bindString(6, delivery);
        }
 
        Integer unity = entity.getUnity();
        if (unity != null) {
            stmt.bindLong(7, unity);
        }
        stmt.bindLong(8, entity.getRegionId());
        stmt.bindLong(9, entity.getProviderId());
    }

    @Override
    protected void attachEntity(ExpressProvider entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExpressProvider readEntity(Cursor cursor, int offset) {
        ExpressProvider entity = new ExpressProvider( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // automatic
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // active
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // ticket
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // delivery
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // unity
            cursor.getLong(offset + 7), // regionId
            cursor.getLong(offset + 8) // providerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExpressProvider entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAutomatic(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setActive(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setTicket(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setDelivery(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnity(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRegionId(cursor.getLong(offset + 7));
        entity.setProviderId(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExpressProvider entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExpressProvider entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProviderDao().getAllColumns());
            builder.append(" FROM EXPRESS_PROVIDER T");
            builder.append(" LEFT JOIN REGION T0 ON T.\"REGION_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PROVIDER T1 ON T.\"PROVIDER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExpressProvider loadCurrentDeep(Cursor cursor, boolean lock) {
        ExpressProvider entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }
        offset += daoSession.getRegionDao().getAllColumns().length;

        Provider provider = loadCurrentOther(daoSession.getProviderDao(), cursor, offset);
         if(provider != null) {
            entity.setProvider(provider);
        }

        return entity;    
    }

    public ExpressProvider loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExpressProvider> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExpressProvider> list = new ArrayList<ExpressProvider>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExpressProvider> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExpressProvider> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
