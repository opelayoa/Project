package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.Trip;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRIP".
*/
public class TripDao extends AbstractDao<Trip, Long> {

    public static final String TABLENAME = "TRIP";

    /**
     * Properties of entity Trip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sequence = new Property(1, long.class, "sequence", false, "SEQUENCE");
        public final static Property RegionId = new Property(2, long.class, "regionId", false, "REGION_ID");
        public final static Property TruckId = new Property(3, long.class, "truckId", false, "TRUCK_ID");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property RouteTypeId = new Property(5, Long.class, "routeTypeId", false, "ROUTE_TYPE_ID");
        public final static Property LinearDistance = new Property(6, Double.class, "linearDistance", false, "LINEAR_DISTANCE");
        public final static Property RouteDistance = new Property(7, Double.class, "routeDistance", false, "ROUTE_DISTANCE");
        public final static Property TimeDistance = new Property(8, Double.class, "timeDistance", false, "TIME_DISTANCE");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;

    private Query<Trip> truck_TripListQuery;

    public TripDao(DaoConfig config) {
        super(config);
    }
    
    public TripDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 1: sequence
                "\"REGION_ID\" INTEGER NOT NULL ," + // 2: regionId
                "\"TRUCK_ID\" INTEGER NOT NULL ," + // 3: truckId
                "\"DATE\" INTEGER NOT NULL ," + // 4: date
                "\"ROUTE_TYPE_ID\" INTEGER," + // 5: routeTypeId
                "\"LINEAR_DISTANCE\" REAL," + // 6: linearDistance
                "\"ROUTE_DISTANCE\" REAL," + // 7: routeDistance
                "\"TIME_DISTANCE\" REAL," + // 8: timeDistance
                "\"STATUS\" INTEGER NOT NULL );"); // 9: status
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TRIP__id_REGION_ID_TRUCK_ID_DATE ON TRIP" +
                " (\"_id\",\"REGION_ID\",\"TRUCK_ID\",\"DATE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRIP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSequence());
        stmt.bindLong(3, entity.getRegionId());
        stmt.bindLong(4, entity.getTruckId());
        stmt.bindLong(5, entity.getDate().getTime());
 
        Long routeTypeId = entity.getRouteTypeId();
        if (routeTypeId != null) {
            stmt.bindLong(6, routeTypeId);
        }
 
        Double linearDistance = entity.getLinearDistance();
        if (linearDistance != null) {
            stmt.bindDouble(7, linearDistance);
        }
 
        Double routeDistance = entity.getRouteDistance();
        if (routeDistance != null) {
            stmt.bindDouble(8, routeDistance);
        }
 
        Double timeDistance = entity.getTimeDistance();
        if (timeDistance != null) {
            stmt.bindDouble(9, timeDistance);
        }
        stmt.bindLong(10, entity.getStatus());
    }

    @Override
    protected void attachEntity(Trip entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Trip readEntity(Cursor cursor, int offset) {
        Trip entity = new Trip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // sequence
            cursor.getLong(offset + 2), // regionId
            cursor.getLong(offset + 3), // truckId
            new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // routeTypeId
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // linearDistance
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // routeDistance
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // timeDistance
            cursor.getInt(offset + 9) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSequence(cursor.getLong(offset + 1));
        entity.setRegionId(cursor.getLong(offset + 2));
        entity.setTruckId(cursor.getLong(offset + 3));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setRouteTypeId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLinearDistance(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setRouteDistance(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setTimeDistance(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Trip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Trip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tripList" to-many relationship of Truck. */
    public List<Trip> _queryTruck_TripList(long truckId) {
        synchronized (this) {
            if (truck_TripListQuery == null) {
                QueryBuilder<Trip> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TruckId.eq(null));
                truck_TripListQuery = queryBuilder.build();
            }
        }
        Query<Trip> query = truck_TripListQuery.forCurrentThread();
        query.setParameter(0, truckId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTruckDao().getAllColumns());
            builder.append(" FROM TRIP T");
            builder.append(" LEFT JOIN TRUCK T0 ON T.\"TRUCK_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Trip loadCurrentDeep(Cursor cursor, boolean lock) {
        Trip entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Truck truck = loadCurrentOther(daoSession.getTruckDao(), cursor, offset);
         if(truck != null) {
            entity.setTruck(truck);
        }

        return entity;    
    }

    public Trip loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Trip> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Trip> list = new ArrayList<Trip>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Trip> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Trip> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
