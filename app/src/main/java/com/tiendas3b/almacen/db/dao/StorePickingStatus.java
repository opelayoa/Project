package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "STORE_PICKING_STATUS".
 */
public class StorePickingStatus extends EqualsBase  {

    private Long id;
    /** Not-null value. */
    private String pickDate;
    private int billSmn;
    private int otroiSmn;
    /** Not-null value. */
    private String alias;
    private Boolean ftp;
    private String orderDate;
    private int status;
    private long storeId;
    private long regionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StorePickingStatusDao myDao;

    private Store store;
    private Long store__resolvedKey;

    private Region region;
    private Long region__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public StorePickingStatus() {
    }

    public StorePickingStatus(Long id) {
        this.id = id;
    }

    public StorePickingStatus(Long id, String pickDate, int billSmn, int otroiSmn, String alias, Boolean ftp, String orderDate, int status, long storeId, long regionId) {
        this.id = id;
        this.pickDate = pickDate;
        this.billSmn = billSmn;
        this.otroiSmn = otroiSmn;
        this.alias = alias;
        this.ftp = ftp;
        this.orderDate = orderDate;
        this.status = status;
        this.storeId = storeId;
        this.regionId = regionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStorePickingStatusDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getPickDate() {
        return pickDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPickDate(String pickDate) {
        this.pickDate = pickDate;
    }

    public int getBillSmn() {
        return billSmn;
    }

    public void setBillSmn(int billSmn) {
        this.billSmn = billSmn;
    }

    public int getOtroiSmn() {
        return otroiSmn;
    }

    public void setOtroiSmn(int otroiSmn) {
        this.otroiSmn = otroiSmn;
    }

    /** Not-null value. */
    public String getAlias() {
        return alias;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAlias(String alias) {
        this.alias = alias;
    }

    public Boolean getFtp() {
        return ftp;
    }

    public void setFtp(Boolean ftp) {
        this.ftp = ftp;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(String orderDate) {
        this.orderDate = orderDate;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public long getStoreId() {
        return storeId;
    }

    public void setStoreId(long storeId) {
        this.storeId = storeId;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    /** To-one relationship, resolved on first access. */
    public Store getStore() {
        long __key = this.storeId;
        if (store__resolvedKey == null || !store__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store storeNew = targetDao.load(__key);
            synchronized (this) {
                store = storeNew;
            	store__resolvedKey = __key;
            }
        }
        return store;
    }

    public void setStore(Store store) {
        if (store == null) {
            throw new DaoException("To-one property 'storeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.store = store;
            storeId = store.getId();
            store__resolvedKey = storeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
