package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.VArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VARTICLE".
*/
public class VArticleDao extends AbstractDao<VArticle, Long> {

    public static final String TABLENAME = "VARTICLE";

    /**
     * Properties of entity VArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Unity = new Property(2, String.class, "unity", false, "UNITY");
        public final static Property Packing = new Property(3, Integer.class, "packing", false, "PACKING");
        public final static Property IvaId = new Property(4, Long.class, "ivaId", false, "IVA_ID");
        public final static Property Cost = new Property(5, Float.class, "cost", false, "COST");
        public final static Property Sale = new Property(6, Float.class, "sale", false, "SALE");
        public final static Property Inosurte = new Property(7, Short.class, "inosurte", false, "INOSURTE");
        public final static Property ExpiryMax = new Property(8, Short.class, "expiryMax", false, "EXPIRY_MAX");
        public final static Property Purchasing = new Property(9, Boolean.class, "purchasing", false, "PURCHASING");
        public final static Property TypeId = new Property(10, Integer.class, "typeId", false, "TYPE_ID");
        public final static Property Circuit = new Property(11, String.class, "circuit", false, "CIRCUIT");
        public final static Property FatherIclave = new Property(12, Integer.class, "fatherIclave", false, "FATHER_ICLAVE");
        public final static Property ActiveId = new Property(13, long.class, "activeId", false, "ACTIVE_ID");
        public final static Property UnitId = new Property(14, long.class, "unitId", false, "UNIT_ID");
        public final static Property ProviderId = new Property(15, long.class, "providerId", false, "PROVIDER_ID");
        public final static Property Iclave = new Property(16, long.class, "iclave", false, "ICLAVE");
        public final static Property Barcode = new Property(17, String.class, "barcode", false, "BARCODE");
    };

    private DaoSession daoSession;


    public VArticleDao(DaoConfig config) {
        super(config);
    }
    
    public VArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DESCRIPTION\" TEXT," + // 1: description
                "\"UNITY\" TEXT," + // 2: unity
                "\"PACKING\" INTEGER," + // 3: packing
                "\"IVA_ID\" INTEGER," + // 4: ivaId
                "\"COST\" REAL," + // 5: cost
                "\"SALE\" REAL," + // 6: sale
                "\"INOSURTE\" INTEGER," + // 7: inosurte
                "\"EXPIRY_MAX\" INTEGER," + // 8: expiryMax
                "\"PURCHASING\" INTEGER," + // 9: purchasing
                "\"TYPE_ID\" INTEGER," + // 10: typeId
                "\"CIRCUIT\" TEXT," + // 11: circuit
                "\"FATHER_ICLAVE\" INTEGER," + // 12: fatherIclave
                "\"ACTIVE_ID\" INTEGER NOT NULL ," + // 13: activeId
                "\"UNIT_ID\" INTEGER NOT NULL ," + // 14: unitId
                "\"PROVIDER_ID\" INTEGER NOT NULL ," + // 15: providerId
                "\"ICLAVE\" INTEGER NOT NULL ," + // 16: iclave
                "\"BARCODE\" TEXT);"); // 17: barcode
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_VARTICLE_ICLAVE_BARCODE ON VARTICLE" +
                " (\"ICLAVE\",\"BARCODE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VARTICLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VArticle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String unity = entity.getUnity();
        if (unity != null) {
            stmt.bindString(3, unity);
        }
 
        Integer packing = entity.getPacking();
        if (packing != null) {
            stmt.bindLong(4, packing);
        }
 
        Long ivaId = entity.getIvaId();
        if (ivaId != null) {
            stmt.bindLong(5, ivaId);
        }
 
        Float cost = entity.getCost();
        if (cost != null) {
            stmt.bindDouble(6, cost);
        }
 
        Float sale = entity.getSale();
        if (sale != null) {
            stmt.bindDouble(7, sale);
        }
 
        Short inosurte = entity.getInosurte();
        if (inosurte != null) {
            stmt.bindLong(8, inosurte);
        }
 
        Short expiryMax = entity.getExpiryMax();
        if (expiryMax != null) {
            stmt.bindLong(9, expiryMax);
        }
 
        Boolean purchasing = entity.getPurchasing();
        if (purchasing != null) {
            stmt.bindLong(10, purchasing ? 1L: 0L);
        }
 
        Integer typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(11, typeId);
        }
 
        String circuit = entity.getCircuit();
        if (circuit != null) {
            stmt.bindString(12, circuit);
        }
 
        Integer fatherIclave = entity.getFatherIclave();
        if (fatherIclave != null) {
            stmt.bindLong(13, fatherIclave);
        }
        stmt.bindLong(14, entity.getActiveId());
        stmt.bindLong(15, entity.getUnitId());
        stmt.bindLong(16, entity.getProviderId());
        stmt.bindLong(17, entity.getIclave());
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(18, barcode);
        }
    }

    @Override
    protected void attachEntity(VArticle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public VArticle readEntity(Cursor cursor, int offset) {
        VArticle entity = new VArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unity
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // packing
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // ivaId
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // cost
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // sale
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // inosurte
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8), // expiryMax
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // purchasing
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // typeId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // circuit
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // fatherIclave
            cursor.getLong(offset + 13), // activeId
            cursor.getLong(offset + 14), // unitId
            cursor.getLong(offset + 15), // providerId
            cursor.getLong(offset + 16), // iclave
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // barcode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VArticle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPacking(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIvaId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCost(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setSale(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setInosurte(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setExpiryMax(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8));
        entity.setPurchasing(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setTypeId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCircuit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFatherIclave(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setActiveId(cursor.getLong(offset + 13));
        entity.setUnitId(cursor.getLong(offset + 14));
        entity.setProviderId(cursor.getLong(offset + 15));
        entity.setIclave(cursor.getLong(offset + 16));
        entity.setBarcode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VArticle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(VArticle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArticleStateDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUnitDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getProviderDao().getAllColumns());
            builder.append(" FROM VARTICLE T");
            builder.append(" LEFT JOIN ARTICLE_STATE T0 ON T.\"ACTIVE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN UNIT T1 ON T.\"UNIT_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN PROVIDER T2 ON T.\"PROVIDER_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected VArticle loadCurrentDeep(Cursor cursor, boolean lock) {
        VArticle entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ArticleState active = loadCurrentOther(daoSession.getArticleStateDao(), cursor, offset);
         if(active != null) {
            entity.setActive(active);
        }
        offset += daoSession.getArticleStateDao().getAllColumns().length;

        Unit unit = loadCurrentOther(daoSession.getUnitDao(), cursor, offset);
         if(unit != null) {
            entity.setUnit(unit);
        }
        offset += daoSession.getUnitDao().getAllColumns().length;

        Provider provider = loadCurrentOther(daoSession.getProviderDao(), cursor, offset);
         if(provider != null) {
            entity.setProvider(provider);
        }

        return entity;    
    }

    public VArticle loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<VArticle> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<VArticle> list = new ArrayList<VArticle>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<VArticle> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<VArticle> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
