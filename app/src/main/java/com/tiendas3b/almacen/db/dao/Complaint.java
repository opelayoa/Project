package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "COMPLAINT".
 */
public class Complaint extends EqualsBase  {

    private Long id;
    private Integer quantityOrdered;
    private Integer quantitySm;
    private Integer quantityAccepted;
    private Integer conditionId;
    private String obs;
    private String action;
    private String responsibleArea;
    private String responsibleSubarea;
    private String storeObs;
    private long regionId;
    private long storeId;
    private long varticleId;
    /** Not-null value. */
    private String date;
    private long iclave;
    private long seq;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ComplaintDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Store store;
    private Long store__resolvedKey;

    private VArticle varticle;
    private Long varticle__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Complaint() {
    }

    public Complaint(Long id) {
        this.id = id;
    }

    public Complaint(Long id, Integer quantityOrdered, Integer quantitySm, Integer quantityAccepted, Integer conditionId, String obs, String action, String responsibleArea, String responsibleSubarea, String storeObs, long regionId, long storeId, long varticleId, String date, long iclave, long seq) {
        this.id = id;
        this.quantityOrdered = quantityOrdered;
        this.quantitySm = quantitySm;
        this.quantityAccepted = quantityAccepted;
        this.conditionId = conditionId;
        this.obs = obs;
        this.action = action;
        this.responsibleArea = responsibleArea;
        this.responsibleSubarea = responsibleSubarea;
        this.storeObs = storeObs;
        this.regionId = regionId;
        this.storeId = storeId;
        this.varticleId = varticleId;
        this.date = date;
        this.iclave = iclave;
        this.seq = seq;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComplaintDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getQuantityOrdered() {
        return quantityOrdered;
    }

    public void setQuantityOrdered(Integer quantityOrdered) {
        this.quantityOrdered = quantityOrdered;
    }

    public Integer getQuantitySm() {
        return quantitySm;
    }

    public void setQuantitySm(Integer quantitySm) {
        this.quantitySm = quantitySm;
    }

    public Integer getQuantityAccepted() {
        return quantityAccepted;
    }

    public void setQuantityAccepted(Integer quantityAccepted) {
        this.quantityAccepted = quantityAccepted;
    }

    public Integer getConditionId() {
        return conditionId;
    }

    public void setConditionId(Integer conditionId) {
        this.conditionId = conditionId;
    }

    public String getObs() {
        return obs;
    }

    public void setObs(String obs) {
        this.obs = obs;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public String getResponsibleArea() {
        return responsibleArea;
    }

    public void setResponsibleArea(String responsibleArea) {
        this.responsibleArea = responsibleArea;
    }

    public String getResponsibleSubarea() {
        return responsibleSubarea;
    }

    public void setResponsibleSubarea(String responsibleSubarea) {
        this.responsibleSubarea = responsibleSubarea;
    }

    public String getStoreObs() {
        return storeObs;
    }

    public void setStoreObs(String storeObs) {
        this.storeObs = storeObs;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getStoreId() {
        return storeId;
    }

    public void setStoreId(long storeId) {
        this.storeId = storeId;
    }

    public long getVarticleId() {
        return varticleId;
    }

    public void setVarticleId(long varticleId) {
        this.varticleId = varticleId;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    public long getIclave() {
        return iclave;
    }

    public void setIclave(long iclave) {
        this.iclave = iclave;
    }

    public long getSeq() {
        return seq;
    }

    public void setSeq(long seq) {
        this.seq = seq;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Store getStore() {
        long __key = this.storeId;
        if (store__resolvedKey == null || !store__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store storeNew = targetDao.load(__key);
            synchronized (this) {
                store = storeNew;
            	store__resolvedKey = __key;
            }
        }
        return store;
    }

    public void setStore(Store store) {
        if (store == null) {
            throw new DaoException("To-one property 'storeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.store = store;
            storeId = store.getId();
            store__resolvedKey = storeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public VArticle getVarticle() {
        long __key = this.varticleId;
        if (varticle__resolvedKey == null || !varticle__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VArticleDao targetDao = daoSession.getVArticleDao();
            VArticle varticleNew = targetDao.load(__key);
            synchronized (this) {
                varticle = varticleNew;
            	varticle__resolvedKey = __key;
            }
        }
        return varticle;
    }

    public void setVarticle(VArticle varticle) {
        if (varticle == null) {
            throw new DaoException("To-one property 'varticleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.varticle = varticle;
            varticleId = varticle.getId();
            varticle__resolvedKey = varticleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
