package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.QuestionAnswer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_ANSWER".
*/
public class QuestionAnswerDao extends AbstractDao<QuestionAnswer, Void> {

    public static final String TABLENAME = "QUESTION_ANSWER";

    /**
     * Properties of entity QuestionAnswer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property QuestionId = new Property(0, long.class, "questionId", false, "QUESTION_ID");
        public final static Property AnswerId = new Property(1, long.class, "answerId", false, "ANSWER_ID");
    };


    public QuestionAnswerDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionAnswerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_ANSWER\" (" + //
                "\"QUESTION_ID\" INTEGER NOT NULL ," + // 0: questionId
                "\"ANSWER_ID\" INTEGER NOT NULL );"); // 1: answerId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_QUESTION_ANSWER_QUESTION_ID_ANSWER_ID ON QUESTION_ANSWER" +
                " (\"QUESTION_ID\",\"ANSWER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_ANSWER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionAnswer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getQuestionId());
        stmt.bindLong(2, entity.getAnswerId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public QuestionAnswer readEntity(Cursor cursor, int offset) {
        QuestionAnswer entity = new QuestionAnswer( //
            cursor.getLong(offset + 0), // questionId
            cursor.getLong(offset + 1) // answerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QuestionAnswer entity, int offset) {
        entity.setQuestionId(cursor.getLong(offset + 0));
        entity.setAnswerId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(QuestionAnswer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(QuestionAnswer entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
