package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "BUY_DETAIL".
 */
public class BuyDetail extends EqualsBase  {

    private Long id;
    private Integer articleAmount;
    private Integer balance;
    private long articleId;
    private Long receiptSheetCaptureId;
    private long buyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BuyDetailDao myDao;

    private VArticle article;
    private Long article__resolvedKey;

    private ReceiptSheetDetailCapture receiptSheetCapture;
    private Long receiptSheetCapture__resolvedKey;

    private Buy Buy;
    private Long Buy__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BuyDetail() {
    }

    public BuyDetail(Long id) {
        this.id = id;
    }

    public BuyDetail(Long id, Integer articleAmount, Integer balance, long articleId, Long receiptSheetCaptureId, long buyId) {
        this.id = id;
        this.articleAmount = articleAmount;
        this.balance = balance;
        this.articleId = articleId;
        this.receiptSheetCaptureId = receiptSheetCaptureId;
        this.buyId = buyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBuyDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getArticleAmount() {
        return articleAmount;
    }

    public void setArticleAmount(Integer articleAmount) {
        this.articleAmount = articleAmount;
    }

    public Integer getBalance() {
        return balance;
    }

    public void setBalance(Integer balance) {
        this.balance = balance;
    }

    public long getArticleId() {
        return articleId;
    }

    public void setArticleId(long articleId) {
        this.articleId = articleId;
    }

    public Long getReceiptSheetCaptureId() {
        return receiptSheetCaptureId;
    }

    public void setReceiptSheetCaptureId(Long receiptSheetCaptureId) {
        this.receiptSheetCaptureId = receiptSheetCaptureId;
    }

    public long getBuyId() {
        return buyId;
    }

    public void setBuyId(long buyId) {
        this.buyId = buyId;
    }

    /** To-one relationship, resolved on first access. */
    public VArticle getArticle() {
        long __key = this.articleId;
        if (article__resolvedKey == null || !article__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VArticleDao targetDao = daoSession.getVArticleDao();
            VArticle articleNew = targetDao.load(__key);
            synchronized (this) {
                article = articleNew;
            	article__resolvedKey = __key;
            }
        }
        return article;
    }

    public void setArticle(VArticle article) {
        if (article == null) {
            throw new DaoException("To-one property 'articleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.article = article;
            articleId = article.getId();
            article__resolvedKey = articleId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ReceiptSheetDetailCapture getReceiptSheetCapture() {
        Long __key = this.receiptSheetCaptureId;
        if (receiptSheetCapture__resolvedKey == null || !receiptSheetCapture__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ReceiptSheetDetailCaptureDao targetDao = daoSession.getReceiptSheetDetailCaptureDao();
            ReceiptSheetDetailCapture receiptSheetCaptureNew = targetDao.load(__key);
            synchronized (this) {
                receiptSheetCapture = receiptSheetCaptureNew;
            	receiptSheetCapture__resolvedKey = __key;
            }
        }
        return receiptSheetCapture;
    }

    public void setReceiptSheetCapture(ReceiptSheetDetailCapture receiptSheetCapture) {
        synchronized (this) {
            this.receiptSheetCapture = receiptSheetCapture;
            receiptSheetCaptureId = receiptSheetCapture == null ? null : receiptSheetCapture.getId();
            receiptSheetCapture__resolvedKey = receiptSheetCaptureId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Buy getBuy() {
        long __key = this.buyId;
        if (Buy__resolvedKey == null || !Buy__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BuyDao targetDao = daoSession.getBuyDao();
            Buy BuyNew = targetDao.load(__key);
            synchronized (this) {
                Buy = BuyNew;
            	Buy__resolvedKey = __key;
            }
        }
        return Buy;
    }

    public void setBuy(Buy Buy) {
        if (Buy == null) {
            throw new DaoException("To-one property 'buyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.Buy = Buy;
            buyId = Buy.getId();
            Buy__resolvedKey = buyId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
