package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.Provider;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROVIDER".
*/
public class ProviderDao extends AbstractDao<Provider, Long> {

    public static final String TABLENAME = "PROVIDER";

    /**
     * Properties of entity Provider.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property BusinessName = new Property(2, String.class, "businessName", false, "BUSINESS_NAME");
        public final static Property Rfc = new Property(3, String.class, "rfc", false, "RFC");
        public final static Property Phone1 = new Property(4, String.class, "phone1", false, "PHONE1");
        public final static Property Phone2 = new Property(5, String.class, "phone2", false, "PHONE2");
        public final static Property Mail = new Property(6, String.class, "mail", false, "MAIL");
        public final static Property Atention = new Property(7, String.class, "atention", false, "ATENTION");
        public final static Property Active = new Property(8, Boolean.class, "active", false, "ACTIVE");
        public final static Property Supply = new Property(9, Short.class, "supply", false, "SUPPLY");
        public final static Property Term = new Property(10, Short.class, "term", false, "TERM");
        public final static Property Address = new Property(11, String.class, "address", false, "ADDRESS");
        public final static Property MmpConfigId = new Property(12, long.class, "mmpConfigId", false, "MMP_CONFIG_ID");
    };

    private DaoSession daoSession;


    public ProviderDao(DaoConfig config) {
        super(config);
    }
    
    public ProviderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROVIDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"BUSINESS_NAME\" TEXT," + // 2: businessName
                "\"RFC\" TEXT," + // 3: rfc
                "\"PHONE1\" TEXT," + // 4: phone1
                "\"PHONE2\" TEXT," + // 5: phone2
                "\"MAIL\" TEXT," + // 6: mail
                "\"ATENTION\" TEXT," + // 7: atention
                "\"ACTIVE\" INTEGER," + // 8: active
                "\"SUPPLY\" INTEGER," + // 9: supply
                "\"TERM\" INTEGER," + // 10: term
                "\"ADDRESS\" TEXT," + // 11: address
                "\"MMP_CONFIG_ID\" INTEGER NOT NULL );"); // 12: mmpConfigId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROVIDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Provider entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String businessName = entity.getBusinessName();
        if (businessName != null) {
            stmt.bindString(3, businessName);
        }
 
        String rfc = entity.getRfc();
        if (rfc != null) {
            stmt.bindString(4, rfc);
        }
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(5, phone1);
        }
 
        String phone2 = entity.getPhone2();
        if (phone2 != null) {
            stmt.bindString(6, phone2);
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(7, mail);
        }
 
        String atention = entity.getAtention();
        if (atention != null) {
            stmt.bindString(8, atention);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(9, active ? 1L: 0L);
        }
 
        Short supply = entity.getSupply();
        if (supply != null) {
            stmt.bindLong(10, supply);
        }
 
        Short term = entity.getTerm();
        if (term != null) {
            stmt.bindLong(11, term);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(12, address);
        }
        stmt.bindLong(13, entity.getMmpConfigId());
    }

    @Override
    protected void attachEntity(Provider entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Provider readEntity(Cursor cursor, int offset) {
        Provider entity = new Provider( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // businessName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rfc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // atention
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // active
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // supply
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // term
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // address
            cursor.getLong(offset + 12) // mmpConfigId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Provider entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBusinessName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRfc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAtention(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActive(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setSupply(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setTerm(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMmpConfigId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Provider entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Provider entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getConfigProviderDao().getAllColumns());
            builder.append(" FROM PROVIDER T");
            builder.append(" LEFT JOIN CONFIG_PROVIDER T0 ON T.\"MMP_CONFIG_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Provider loadCurrentDeep(Cursor cursor, boolean lock) {
        Provider entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ConfigProvider mmpConfig = loadCurrentOther(daoSession.getConfigProviderDao(), cursor, offset);
         if(mmpConfig != null) {
            entity.setMmpConfig(mmpConfig);
        }

        return entity;    
    }

    public Provider loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Provider> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Provider> list = new ArrayList<Provider>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Provider> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Provider> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
