package com.tiendas3b.almacen.db.dao;

import java.util.List;
import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ROADMAP".
 */
public class Roadmap extends EqualsBase  {

    private Long id;
    private boolean sync;
    private Integer scaffolds;
    private long userId;
    private long regionId;
    private long driverId;
    private long truckId;
    private int travel;
    /** Not-null value. */
    private String date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoadmapDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Driver driver;
    private Long driver__resolvedKey;

    private Truck truck;
    private Long truck__resolvedKey;

    private List<RoadmapDetail> activities;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Roadmap() {
    }

    public Roadmap(Long id) {
        this.id = id;
    }

    public Roadmap(Long id, boolean sync, Integer scaffolds, long userId, long regionId, long driverId, long truckId, int travel, String date) {
        this.id = id;
        this.sync = sync;
        this.scaffolds = scaffolds;
        this.userId = userId;
        this.regionId = regionId;
        this.driverId = driverId;
        this.truckId = truckId;
        this.travel = travel;
        this.date = date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoadmapDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public boolean getSync() {
        return sync;
    }

    public void setSync(boolean sync) {
        this.sync = sync;
    }

    public Integer getScaffolds() {
        return scaffolds;
    }

    public void setScaffolds(Integer scaffolds) {
        this.scaffolds = scaffolds;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getDriverId() {
        return driverId;
    }

    public void setDriverId(long driverId) {
        this.driverId = driverId;
    }

    public long getTruckId() {
        return truckId;
    }

    public void setTruckId(long truckId) {
        this.truckId = truckId;
    }

    public int getTravel() {
        return travel;
    }

    public void setTravel(int travel) {
        this.travel = travel;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Driver getDriver() {
        long __key = this.driverId;
        if (driver__resolvedKey == null || !driver__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DriverDao targetDao = daoSession.getDriverDao();
            Driver driverNew = targetDao.load(__key);
            synchronized (this) {
                driver = driverNew;
            	driver__resolvedKey = __key;
            }
        }
        return driver;
    }

    public void setDriver(Driver driver) {
        if (driver == null) {
            throw new DaoException("To-one property 'driverId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.driver = driver;
            driverId = driver.getId();
            driver__resolvedKey = driverId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Truck getTruck() {
        long __key = this.truckId;
        if (truck__resolvedKey == null || !truck__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TruckDao targetDao = daoSession.getTruckDao();
            Truck truckNew = targetDao.load(__key);
            synchronized (this) {
                truck = truckNew;
            	truck__resolvedKey = __key;
            }
        }
        return truck;
    }

    public void setTruck(Truck truck) {
        if (truck == null) {
            throw new DaoException("To-one property 'truckId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.truck = truck;
            truckId = truck.getId();
            truck__resolvedKey = truckId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RoadmapDetail> getActivities() {
        if (activities == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoadmapDetailDao targetDao = daoSession.getRoadmapDetailDao();
            List<RoadmapDetail> activitiesNew = targetDao._queryRoadmap_Activities(id);
            synchronized (this) {
                if(activities == null) {
                    activities = activitiesNew;
                }
            }
        }
        return activities;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActivities() {
        activities = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
