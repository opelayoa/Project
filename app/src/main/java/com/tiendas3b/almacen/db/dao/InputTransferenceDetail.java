package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "INPUT_TRANSFERENCE_DETAIL".
 */
public class InputTransferenceDetail extends EqualsBase  {

    private Long id;
    private Long iclave;
    private Integer amountSmn;
    private long inputTransferenceId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient InputTransferenceDetailDao myDao;

    private InputTransference inputTransference;
    private Long inputTransference__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public InputTransferenceDetail() {
    }

    public InputTransferenceDetail(Long id) {
        this.id = id;
    }

    public InputTransferenceDetail(Long id, Long iclave, Integer amountSmn, long inputTransferenceId) {
        this.id = id;
        this.iclave = iclave;
        this.amountSmn = amountSmn;
        this.inputTransferenceId = inputTransferenceId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInputTransferenceDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getIclave() {
        return iclave;
    }

    public void setIclave(Long iclave) {
        this.iclave = iclave;
    }

    public Integer getAmountSmn() {
        return amountSmn;
    }

    public void setAmountSmn(Integer amountSmn) {
        this.amountSmn = amountSmn;
    }

    public long getInputTransferenceId() {
        return inputTransferenceId;
    }

    public void setInputTransferenceId(long inputTransferenceId) {
        this.inputTransferenceId = inputTransferenceId;
    }

    /** To-one relationship, resolved on first access. */
    public InputTransference getInputTransference() {
        long __key = this.inputTransferenceId;
        if (inputTransference__resolvedKey == null || !inputTransference__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InputTransferenceDao targetDao = daoSession.getInputTransferenceDao();
            InputTransference inputTransferenceNew = targetDao.load(__key);
            synchronized (this) {
                inputTransference = inputTransferenceNew;
            	inputTransference__resolvedKey = __key;
            }
        }
        return inputTransference;
    }

    public void setInputTransference(InputTransference inputTransference) {
        if (inputTransference == null) {
            throw new DaoException("To-one property 'inputTransferenceId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.inputTransference = inputTransference;
            inputTransferenceId = inputTransference.getId();
            inputTransference__resolvedKey = inputTransferenceId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
