package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ROADMAP_DETAIL".
 */
public class RoadmapDetail extends EqualsBase  {

    private Long id;
    /** Not-null value. */
    private String endDate;
    private Integer scaffoldUpload;
    private Integer scaffoldDownload;
    private int initialKm;
    private int finalKm;
    /** Not-null value. */
    private String initialTime;
    /** Not-null value. */
    private String finalTime;
    private Float cash;
    private Float iave;
    private Float diesel;
    private Float trafficTicket;
    private Float otherCost;
    private String notes;
    private boolean sync;
    private long originId;
    private long destinationId;
    private long activiyId;
    private long roadmapId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoadmapDetailDao myDao;

    private Store origin;
    private Long origin__resolvedKey;

    private Store destination;
    private Long destination__resolvedKey;

    private Activity activity;
    private Long activity__resolvedKey;

    private Roadmap roadmap;
    private Long roadmap__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RoadmapDetail() {
    }

    public RoadmapDetail(Long id) {
        this.id = id;
    }

    public RoadmapDetail(Long id, String endDate, Integer scaffoldUpload, Integer scaffoldDownload, int initialKm, int finalKm, String initialTime, String finalTime, Float cash, Float iave, Float diesel, Float trafficTicket, Float otherCost, String notes, boolean sync, long originId, long destinationId, long activiyId, long roadmapId) {
        this.id = id;
        this.endDate = endDate;
        this.scaffoldUpload = scaffoldUpload;
        this.scaffoldDownload = scaffoldDownload;
        this.initialKm = initialKm;
        this.finalKm = finalKm;
        this.initialTime = initialTime;
        this.finalTime = finalTime;
        this.cash = cash;
        this.iave = iave;
        this.diesel = diesel;
        this.trafficTicket = trafficTicket;
        this.otherCost = otherCost;
        this.notes = notes;
        this.sync = sync;
        this.originId = originId;
        this.destinationId = destinationId;
        this.activiyId = activiyId;
        this.roadmapId = roadmapId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoadmapDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getEndDate() {
        return endDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public Integer getScaffoldUpload() {
        return scaffoldUpload;
    }

    public void setScaffoldUpload(Integer scaffoldUpload) {
        this.scaffoldUpload = scaffoldUpload;
    }

    public Integer getScaffoldDownload() {
        return scaffoldDownload;
    }

    public void setScaffoldDownload(Integer scaffoldDownload) {
        this.scaffoldDownload = scaffoldDownload;
    }

    public int getInitialKm() {
        return initialKm;
    }

    public void setInitialKm(int initialKm) {
        this.initialKm = initialKm;
    }

    public int getFinalKm() {
        return finalKm;
    }

    public void setFinalKm(int finalKm) {
        this.finalKm = finalKm;
    }

    /** Not-null value. */
    public String getInitialTime() {
        return initialTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setInitialTime(String initialTime) {
        this.initialTime = initialTime;
    }

    /** Not-null value. */
    public String getFinalTime() {
        return finalTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFinalTime(String finalTime) {
        this.finalTime = finalTime;
    }

    public Float getCash() {
        return cash;
    }

    public void setCash(Float cash) {
        this.cash = cash;
    }

    public Float getIave() {
        return iave;
    }

    public void setIave(Float iave) {
        this.iave = iave;
    }

    public Float getDiesel() {
        return diesel;
    }

    public void setDiesel(Float diesel) {
        this.diesel = diesel;
    }

    public Float getTrafficTicket() {
        return trafficTicket;
    }

    public void setTrafficTicket(Float trafficTicket) {
        this.trafficTicket = trafficTicket;
    }

    public Float getOtherCost() {
        return otherCost;
    }

    public void setOtherCost(Float otherCost) {
        this.otherCost = otherCost;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public boolean getSync() {
        return sync;
    }

    public void setSync(boolean sync) {
        this.sync = sync;
    }

    public long getOriginId() {
        return originId;
    }

    public void setOriginId(long originId) {
        this.originId = originId;
    }

    public long getDestinationId() {
        return destinationId;
    }

    public void setDestinationId(long destinationId) {
        this.destinationId = destinationId;
    }

    public long getActiviyId() {
        return activiyId;
    }

    public void setActiviyId(long activiyId) {
        this.activiyId = activiyId;
    }

    public long getRoadmapId() {
        return roadmapId;
    }

    public void setRoadmapId(long roadmapId) {
        this.roadmapId = roadmapId;
    }

    /** To-one relationship, resolved on first access. */
    public Store getOrigin() {
        long __key = this.originId;
        if (origin__resolvedKey == null || !origin__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store originNew = targetDao.load(__key);
            synchronized (this) {
                origin = originNew;
            	origin__resolvedKey = __key;
            }
        }
        return origin;
    }

    public void setOrigin(Store origin) {
        if (origin == null) {
            throw new DaoException("To-one property 'originId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.origin = origin;
            originId = origin.getId();
            origin__resolvedKey = originId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Store getDestination() {
        long __key = this.destinationId;
        if (destination__resolvedKey == null || !destination__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store destinationNew = targetDao.load(__key);
            synchronized (this) {
                destination = destinationNew;
            	destination__resolvedKey = __key;
            }
        }
        return destination;
    }

    public void setDestination(Store destination) {
        if (destination == null) {
            throw new DaoException("To-one property 'destinationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.destination = destination;
            destinationId = destination.getId();
            destination__resolvedKey = destinationId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Activity getActivity() {
        long __key = this.activiyId;
        if (activity__resolvedKey == null || !activity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActivityDao targetDao = daoSession.getActivityDao();
            Activity activityNew = targetDao.load(__key);
            synchronized (this) {
                activity = activityNew;
            	activity__resolvedKey = __key;
            }
        }
        return activity;
    }

    public void setActivity(Activity activity) {
        if (activity == null) {
            throw new DaoException("To-one property 'activiyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.activity = activity;
            activiyId = activity.getId();
            activity__resolvedKey = activiyId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Roadmap getRoadmap() {
        long __key = this.roadmapId;
        if (roadmap__resolvedKey == null || !roadmap__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoadmapDao targetDao = daoSession.getRoadmapDao();
            Roadmap roadmapNew = targetDao.load(__key);
            synchronized (this) {
                roadmap = roadmapNew;
            	roadmap__resolvedKey = __key;
            }
        }
        return roadmap;
    }

    public void setRoadmap(Roadmap roadmap) {
        if (roadmap == null) {
            throw new DaoException("To-one property 'roadmapId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.roadmap = roadmap;
            roadmapId = roadmap.getId();
            roadmap__resolvedKey = roadmapId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
