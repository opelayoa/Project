package com.tiendas3b.almacen.db.dao;

import java.util.List;
import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "RACK".
 */
public class Rack extends SpinnerBase  {

    private Long id;
    private long rackId;
    private String name;
    private Integer quantityLevels;
    private long areaId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RackDao myDao;

    private Area area;
    private Long area__resolvedKey;

    private List<RackLevel> levels;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Rack() {
    }

    public Rack(Long id) {
        this.id = id;
    }

    public Rack(Long id, long rackId, String name, Integer quantityLevels, long areaId) {
        this.id = id;
        this.rackId = rackId;
        this.name = name;
        this.quantityLevels = quantityLevels;
        this.areaId = areaId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRackDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getRackId() {
        return rackId;
    }

    public void setRackId(long rackId) {
        this.rackId = rackId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getQuantityLevels() {
        return quantityLevels;
    }

    public void setQuantityLevels(Integer quantityLevels) {
        this.quantityLevels = quantityLevels;
    }

    public long getAreaId() {
        return areaId;
    }

    public void setAreaId(long areaId) {
        this.areaId = areaId;
    }

    /** To-one relationship, resolved on first access. */
    public Area getArea() {
        long __key = this.areaId;
        if (area__resolvedKey == null || !area__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AreaDao targetDao = daoSession.getAreaDao();
            Area areaNew = targetDao.load(__key);
            synchronized (this) {
                area = areaNew;
            	area__resolvedKey = __key;
            }
        }
        return area;
    }

    public void setArea(Area area) {
        if (area == null) {
            throw new DaoException("To-one property 'areaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.area = area;
            areaId = area.getId();
            area__resolvedKey = areaId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RackLevel> getLevels() {
        if (levels == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RackLevelDao targetDao = daoSession.getRackLevelDao();
            List<RackLevel> levelsNew = targetDao._queryRack_Levels(id);
            synchronized (this) {
                if(levels == null) {
                    levels = levelsNew;
                }
            }
        }
        return levels;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLevels() {
        levels = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public String getDescription() {
        return name;
    }
    // KEEP METHODS END

}
