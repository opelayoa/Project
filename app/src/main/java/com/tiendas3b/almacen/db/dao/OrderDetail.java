package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ORDER_DETAIL".
 */
public class OrderDetail extends EqualsBase  {

    private Long id;
    private Integer existence;
    private int quantity;
    /** Not-null value. */
    private String type;
    private Integer fatherIclave;
    private Boolean child;
    private long orderId;
    private long articleId;
    private int iclave;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderDetailDao myDao;

    private OrderPicking order;
    private Long order__resolvedKey;

    private VArticle article;
    private Long article__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OrderDetail() {
    }

    public OrderDetail(Long id) {
        this.id = id;
    }

    public OrderDetail(Long id, Integer existence, int quantity, String type, Integer fatherIclave, Boolean child, long orderId, long articleId, int iclave) {
        this.id = id;
        this.existence = existence;
        this.quantity = quantity;
        this.type = type;
        this.fatherIclave = fatherIclave;
        this.child = child;
        this.orderId = orderId;
        this.articleId = articleId;
        this.iclave = iclave;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getExistence() {
        return existence;
    }

    public void setExistence(Integer existence) {
        this.existence = existence;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public Integer getFatherIclave() {
        return fatherIclave;
    }

    public void setFatherIclave(Integer fatherIclave) {
        this.fatherIclave = fatherIclave;
    }

    public Boolean getChild() {
        return child;
    }

    public void setChild(Boolean child) {
        this.child = child;
    }

    public long getOrderId() {
        return orderId;
    }

    public void setOrderId(long orderId) {
        this.orderId = orderId;
    }

    public long getArticleId() {
        return articleId;
    }

    public void setArticleId(long articleId) {
        this.articleId = articleId;
    }

    public int getIclave() {
        return iclave;
    }

    public void setIclave(int iclave) {
        this.iclave = iclave;
    }

    /** To-one relationship, resolved on first access. */
    public OrderPicking getOrder() {
        long __key = this.orderId;
        if (order__resolvedKey == null || !order__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderPickingDao targetDao = daoSession.getOrderPickingDao();
            OrderPicking orderNew = targetDao.load(__key);
            synchronized (this) {
                order = orderNew;
            	order__resolvedKey = __key;
            }
        }
        return order;
    }

    public void setOrder(OrderPicking order) {
        if (order == null) {
            throw new DaoException("To-one property 'orderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.order = order;
            orderId = order.getId();
            order__resolvedKey = orderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public VArticle getArticle() {
        long __key = this.articleId;
        if (article__resolvedKey == null || !article__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VArticleDao targetDao = daoSession.getVArticleDao();
            VArticle articleNew = targetDao.load(__key);
            synchronized (this) {
                article = articleNew;
            	article__resolvedKey = __key;
            }
        }
        return article;
    }

    public void setArticle(VArticle article) {
        if (article == null) {
            throw new DaoException("To-one property 'articleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.article = article;
            articleId = article.getId();
            article__resolvedKey = articleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
