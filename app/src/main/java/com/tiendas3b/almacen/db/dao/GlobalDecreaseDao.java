package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.GlobalDecrease;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GLOBAL_DECREASE".
*/
public class GlobalDecreaseDao extends AbstractDao<GlobalDecrease, Long> {

    public static final String TABLENAME = "GLOBAL_DECREASE";

    /**
     * Properties of entity GlobalDecrease.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Numreg = new Property(1, Integer.class, "numreg", false, "NUMREG");
        public final static Property Numarts = new Property(2, Integer.class, "numarts", false, "NUMARTS");
        public final static Property Amount = new Property(3, Integer.class, "amount", false, "AMOUNT");
        public final static Property Cost = new Property(4, Float.class, "cost", false, "COST");
        public final static Property Sale = new Property(5, Float.class, "sale", false, "SALE");
        public final static Property AmountAvg = new Property(6, Float.class, "amountAvg", false, "AMOUNT_AVG");
        public final static Property CostAvg = new Property(7, Float.class, "costAvg", false, "COST_AVG");
        public final static Property SaleAvg = new Property(8, Float.class, "saleAvg", false, "SALE_AVG");
        public final static Property RegionId = new Property(9, long.class, "regionId", false, "REGION_ID");
        public final static Property Date = new Property(10, java.util.Date.class, "date", false, "DATE");
    };

    private DaoSession daoSession;


    public GlobalDecreaseDao(DaoConfig config) {
        super(config);
    }
    
    public GlobalDecreaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GLOBAL_DECREASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NUMREG\" INTEGER," + // 1: numreg
                "\"NUMARTS\" INTEGER," + // 2: numarts
                "\"AMOUNT\" INTEGER," + // 3: amount
                "\"COST\" REAL," + // 4: cost
                "\"SALE\" REAL," + // 5: sale
                "\"AMOUNT_AVG\" REAL," + // 6: amountAvg
                "\"COST_AVG\" REAL," + // 7: costAvg
                "\"SALE_AVG\" REAL," + // 8: saleAvg
                "\"REGION_ID\" INTEGER NOT NULL ," + // 9: regionId
                "\"DATE\" INTEGER NOT NULL );"); // 10: date
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_GLOBAL_DECREASE_REGION_ID_DATE ON GLOBAL_DECREASE" +
                " (\"REGION_ID\",\"DATE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GLOBAL_DECREASE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GlobalDecrease entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer numreg = entity.getNumreg();
        if (numreg != null) {
            stmt.bindLong(2, numreg);
        }
 
        Integer numarts = entity.getNumarts();
        if (numarts != null) {
            stmt.bindLong(3, numarts);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(4, amount);
        }
 
        Float cost = entity.getCost();
        if (cost != null) {
            stmt.bindDouble(5, cost);
        }
 
        Float sale = entity.getSale();
        if (sale != null) {
            stmt.bindDouble(6, sale);
        }
 
        Float amountAvg = entity.getAmountAvg();
        if (amountAvg != null) {
            stmt.bindDouble(7, amountAvg);
        }
 
        Float costAvg = entity.getCostAvg();
        if (costAvg != null) {
            stmt.bindDouble(8, costAvg);
        }
 
        Float saleAvg = entity.getSaleAvg();
        if (saleAvg != null) {
            stmt.bindDouble(9, saleAvg);
        }
        stmt.bindLong(10, entity.getRegionId());
        stmt.bindLong(11, entity.getDate().getTime());
    }

    @Override
    protected void attachEntity(GlobalDecrease entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GlobalDecrease readEntity(Cursor cursor, int offset) {
        GlobalDecrease entity = new GlobalDecrease( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // numreg
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // numarts
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // cost
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // sale
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // amountAvg
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // costAvg
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // saleAvg
            cursor.getLong(offset + 9), // regionId
            new java.util.Date(cursor.getLong(offset + 10)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GlobalDecrease entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumreg(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNumarts(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCost(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setSale(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setAmountAvg(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setCostAvg(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setSaleAvg(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setRegionId(cursor.getLong(offset + 9));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GlobalDecrease entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GlobalDecrease entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(" FROM GLOBAL_DECREASE T");
            builder.append(" LEFT JOIN REGION T0 ON T.\"REGION_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GlobalDecrease loadCurrentDeep(Cursor cursor, boolean lock) {
        GlobalDecrease entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }

        return entity;    
    }

    public GlobalDecrease loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GlobalDecrease> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GlobalDecrease> list = new ArrayList<GlobalDecrease>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GlobalDecrease> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GlobalDecrease> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
