package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.OrderType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_TYPE".
*/
public class OrderTypeDao extends AbstractDao<OrderType, Long> {

    public static final String TABLENAME = "ORDER_TYPE";

    /**
     * Properties of entity OrderType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeId = new Property(1, int.class, "typeId", false, "TYPE_ID");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property RegionId = new Property(4, long.class, "regionId", false, "REGION_ID");
        public final static Property CircuitId = new Property(5, Integer.class, "circuitId", false, "CIRCUIT_ID");
        public final static Property Separate = new Property(6, Boolean.class, "separate", false, "SEPARATE");
        public final static Property Active = new Property(7, Boolean.class, "active", false, "ACTIVE");
        public final static Property ScannerAvailable = new Property(8, Boolean.class, "scannerAvailable", false, "SCANNER_AVAILABLE");
        public final static Property MobileAvailable = new Property(9, Boolean.class, "mobileAvailable", false, "MOBILE_AVAILABLE");
    };


    public OrderTypeDao(DaoConfig config) {
        super(config);
    }
    
    public OrderTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE_ID\" INTEGER NOT NULL UNIQUE ," + // 1: typeId
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"ALIAS\" TEXT," + // 3: alias
                "\"REGION_ID\" INTEGER NOT NULL ," + // 4: regionId
                "\"CIRCUIT_ID\" INTEGER," + // 5: circuitId
                "\"SEPARATE\" INTEGER," + // 6: separate
                "\"ACTIVE\" INTEGER," + // 7: active
                "\"SCANNER_AVAILABLE\" INTEGER," + // 8: scannerAvailable
                "\"MOBILE_AVAILABLE\" INTEGER);"); // 9: mobileAvailable
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ORDER_TYPE_REGION_ID_CIRCUIT_ID ON ORDER_TYPE" +
                " (\"REGION_ID\",\"CIRCUIT_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_TYPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTypeId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
        stmt.bindLong(5, entity.getRegionId());
 
        Integer circuitId = entity.getCircuitId();
        if (circuitId != null) {
            stmt.bindLong(6, circuitId);
        }
 
        Boolean separate = entity.getSeparate();
        if (separate != null) {
            stmt.bindLong(7, separate ? 1L: 0L);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(8, active ? 1L: 0L);
        }
 
        Boolean scannerAvailable = entity.getScannerAvailable();
        if (scannerAvailable != null) {
            stmt.bindLong(9, scannerAvailable ? 1L: 0L);
        }
 
        Boolean mobileAvailable = entity.getMobileAvailable();
        if (mobileAvailable != null) {
            stmt.bindLong(10, mobileAvailable ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderType readEntity(Cursor cursor, int offset) {
        OrderType entity = new OrderType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // typeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.getLong(offset + 4), // regionId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // circuitId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // separate
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // active
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // scannerAvailable
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // mobileAvailable
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeId(cursor.getInt(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegionId(cursor.getLong(offset + 4));
        entity.setCircuitId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSeparate(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setActive(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setScannerAvailable(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setMobileAvailable(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
