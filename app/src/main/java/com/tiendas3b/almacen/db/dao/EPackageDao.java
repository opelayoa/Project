package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.EPackage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EPACKAGE".
*/
public class EPackageDao extends AbstractDao<EPackage, Long> {

    public static final String TABLENAME = "EPACKAGE";

    /**
     * Properties of entity EPackage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Folio = new Property(1, String.class, "folio", false, "FOLIO");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property ArticleId = new Property(3, Long.class, "articleId", false, "ARTICLE_ID");
        public final static Property ReceiptDate = new Property(4, String.class, "receiptDate", false, "RECEIPT_DATE");
        public final static Property Barcode = new Property(5, String.class, "barcode", false, "BARCODE");
        public final static Property Unity = new Property(6, String.class, "unity", false, "UNITY");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property RegionId = new Property(8, long.class, "regionId", false, "REGION_ID");
        public final static Property StoreId = new Property(9, long.class, "storeId", false, "STORE_ID");
        public final static Property ProviderId = new Property(10, long.class, "providerId", false, "PROVIDER_ID");
    };

    private DaoSession daoSession;

    private Query<EPackage> providerEpackage_PackagesQuery;

    public EPackageDao(DaoConfig config) {
        super(config);
    }
    
    public EPackageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EPACKAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FOLIO\" TEXT," + // 1: folio
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"ARTICLE_ID\" INTEGER," + // 3: articleId
                "\"RECEIPT_DATE\" TEXT," + // 4: receiptDate
                "\"BARCODE\" TEXT," + // 5: barcode
                "\"UNITY\" TEXT," + // 6: unity
                "\"STATUS\" INTEGER," + // 7: status
                "\"REGION_ID\" INTEGER NOT NULL ," + // 8: regionId
                "\"STORE_ID\" INTEGER NOT NULL ," + // 9: storeId
                "\"PROVIDER_ID\" INTEGER NOT NULL );"); // 10: providerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EPACKAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EPackage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String folio = entity.getFolio();
        if (folio != null) {
            stmt.bindString(2, folio);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Long articleId = entity.getArticleId();
        if (articleId != null) {
            stmt.bindLong(4, articleId);
        }
 
        String receiptDate = entity.getReceiptDate();
        if (receiptDate != null) {
            stmt.bindString(5, receiptDate);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(6, barcode);
        }
 
        String unity = entity.getUnity();
        if (unity != null) {
            stmt.bindString(7, unity);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
        stmt.bindLong(9, entity.getRegionId());
        stmt.bindLong(10, entity.getStoreId());
        stmt.bindLong(11, entity.getProviderId());
    }

    @Override
    protected void attachEntity(EPackage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EPackage readEntity(Cursor cursor, int offset) {
        EPackage entity = new EPackage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // folio
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // articleId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // receiptDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // barcode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unity
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.getLong(offset + 8), // regionId
            cursor.getLong(offset + 9), // storeId
            cursor.getLong(offset + 10) // providerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EPackage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFolio(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArticleId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setReceiptDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBarcode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setRegionId(cursor.getLong(offset + 8));
        entity.setStoreId(cursor.getLong(offset + 9));
        entity.setProviderId(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EPackage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EPackage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "packages" to-many relationship of ProviderEpackage. */
    public List<EPackage> _queryProviderEpackage_Packages(long providerId) {
        synchronized (this) {
            if (providerEpackage_PackagesQuery == null) {
                QueryBuilder<EPackage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProviderId.eq(null));
                providerEpackage_PackagesQuery = queryBuilder.build();
            }
        }
        Query<EPackage> query = providerEpackage_PackagesQuery.forCurrentThread();
        query.setParameter(0, providerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getStoreDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getProviderEpackageDao().getAllColumns());
            builder.append(" FROM EPACKAGE T");
            builder.append(" LEFT JOIN REGION T0 ON T.\"REGION_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN STORE T1 ON T.\"STORE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN PROVIDER_EPACKAGE T2 ON T.\"PROVIDER_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EPackage loadCurrentDeep(Cursor cursor, boolean lock) {
        EPackage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }
        offset += daoSession.getRegionDao().getAllColumns().length;

        Store store = loadCurrentOther(daoSession.getStoreDao(), cursor, offset);
         if(store != null) {
            entity.setStore(store);
        }
        offset += daoSession.getStoreDao().getAllColumns().length;

        ProviderEpackage provider = loadCurrentOther(daoSession.getProviderEpackageDao(), cursor, offset);
         if(provider != null) {
            entity.setProvider(provider);
        }

        return entity;    
    }

    public EPackage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EPackage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EPackage> list = new ArrayList<EPackage>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EPackage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EPackage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
