package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TRIP_DETAIL".
 */
public class TripDetail {

    private Long id;
    private long tripId;
    private long sequence;
    private Long storeId;
    private String storeDescription;
    private Long palletsNumber;
    private int uploadedPalletCounter;
    private int deliveredPalletCounter;
    private int collectedPalletTotal;
    private int returnedPalletTotal;
    private int status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TripDetailDao myDao;

    private Trip trip;
    private Long trip__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TripDetail() {
    }

    public TripDetail(Long id) {
        this.id = id;
    }

    public TripDetail(Long id, long tripId, long sequence, Long storeId, String storeDescription, Long palletsNumber, int uploadedPalletCounter, int deliveredPalletCounter, int collectedPalletTotal, int returnedPalletTotal, int status) {
        this.id = id;
        this.tripId = tripId;
        this.sequence = sequence;
        this.storeId = storeId;
        this.storeDescription = storeDescription;
        this.palletsNumber = palletsNumber;
        this.uploadedPalletCounter = uploadedPalletCounter;
        this.deliveredPalletCounter = deliveredPalletCounter;
        this.collectedPalletTotal = collectedPalletTotal;
        this.returnedPalletTotal = returnedPalletTotal;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTripDetailDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getTripId() {
        return tripId;
    }

    public void setTripId(long tripId) {
        this.tripId = tripId;
    }

    public long getSequence() {
        return sequence;
    }

    public void setSequence(long sequence) {
        this.sequence = sequence;
    }

    public Long getStoreId() {
        return storeId;
    }

    public void setStoreId(Long storeId) {
        this.storeId = storeId;
    }

    public String getStoreDescription() {
        return storeDescription;
    }

    public void setStoreDescription(String storeDescription) {
        this.storeDescription = storeDescription;
    }

    public Long getPalletsNumber() {
        return palletsNumber;
    }

    public void setPalletsNumber(Long palletsNumber) {
        this.palletsNumber = palletsNumber;
    }

    public int getUploadedPalletCounter() {
        return uploadedPalletCounter;
    }

    public void setUploadedPalletCounter(int uploadedPalletCounter) {
        this.uploadedPalletCounter = uploadedPalletCounter;
    }

    public int getDeliveredPalletCounter() {
        return deliveredPalletCounter;
    }

    public void setDeliveredPalletCounter(int deliveredPalletCounter) {
        this.deliveredPalletCounter = deliveredPalletCounter;
    }

    public int getCollectedPalletTotal() {
        return collectedPalletTotal;
    }

    public void setCollectedPalletTotal(int collectedPalletTotal) {
        this.collectedPalletTotal = collectedPalletTotal;
    }

    public int getReturnedPalletTotal() {
        return returnedPalletTotal;
    }

    public void setReturnedPalletTotal(int returnedPalletTotal) {
        this.returnedPalletTotal = returnedPalletTotal;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    /** To-one relationship, resolved on first access. */
    public Trip getTrip() {
        long __key = this.tripId;
        if (trip__resolvedKey == null || !trip__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TripDao targetDao = daoSession.getTripDao();
            Trip tripNew = targetDao.load(__key);
            synchronized (this) {
                trip = tripNew;
            	trip__resolvedKey = __key;
            }
        }
        return trip;
    }

    public void setTrip(Trip trip) {
        if (trip == null) {
            throw new DaoException("To-one property 'tripId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.trip = trip;
            tripId = trip.getId();
            trip__resolvedKey = tripId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
