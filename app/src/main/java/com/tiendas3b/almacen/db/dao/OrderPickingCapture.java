package com.tiendas3b.almacen.db.dao;

import java.util.List;
import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ORDER_PICKING_CAPTURE".
 */
public class OrderPickingCapture extends EqualsBase  {

    private Long id;
    private long regionId;
    private long storeId;
    private int paybill;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrderPickingCaptureDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Store store;
    private Long store__resolvedKey;

    private List<OrderDetailCapture> details;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OrderPickingCapture() {
    }

    public OrderPickingCapture(Long id) {
        this.id = id;
    }

    public OrderPickingCapture(Long id, long regionId, long storeId, int paybill) {
        this.id = id;
        this.regionId = regionId;
        this.storeId = storeId;
        this.paybill = paybill;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderPickingCaptureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getStoreId() {
        return storeId;
    }

    public void setStoreId(long storeId) {
        this.storeId = storeId;
    }

    public int getPaybill() {
        return paybill;
    }

    public void setPaybill(int paybill) {
        this.paybill = paybill;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Store getStore() {
        long __key = this.storeId;
        if (store__resolvedKey == null || !store__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StoreDao targetDao = daoSession.getStoreDao();
            Store storeNew = targetDao.load(__key);
            synchronized (this) {
                store = storeNew;
            	store__resolvedKey = __key;
            }
        }
        return store;
    }

    public void setStore(Store store) {
        if (store == null) {
            throw new DaoException("To-one property 'storeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.store = store;
            storeId = store.getId();
            store__resolvedKey = storeId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrderDetailCapture> getDetails() {
        if (details == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderDetailCaptureDao targetDao = daoSession.getOrderDetailCaptureDao();
            List<OrderDetailCapture> detailsNew = targetDao._queryOrderPickingCapture_Details(id);
            synchronized (this) {
                if(details == null) {
                    details = detailsNew;
                }
            }
        }
        return details;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDetails() {
        details = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
