package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.OrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_DETAIL".
*/
public class OrderDetailDao extends AbstractDao<OrderDetail, Long> {

    public static final String TABLENAME = "ORDER_DETAIL";

    /**
     * Properties of entity OrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Existence = new Property(1, Integer.class, "existence", false, "EXISTENCE");
        public final static Property Quantity = new Property(2, int.class, "quantity", false, "QUANTITY");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property FatherIclave = new Property(4, Integer.class, "fatherIclave", false, "FATHER_ICLAVE");
        public final static Property Child = new Property(5, Boolean.class, "child", false, "CHILD");
        public final static Property OrderId = new Property(6, long.class, "orderId", false, "ORDER_ID");
        public final static Property ArticleId = new Property(7, long.class, "articleId", false, "ARTICLE_ID");
        public final static Property Iclave = new Property(8, int.class, "iclave", false, "ICLAVE");
    };

    private DaoSession daoSession;

    private Query<OrderDetail> orderPicking_DetailsQuery;

    public OrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EXISTENCE\" INTEGER," + // 1: existence
                "\"QUANTITY\" INTEGER NOT NULL ," + // 2: quantity
                "\"TYPE\" TEXT NOT NULL ," + // 3: type
                "\"FATHER_ICLAVE\" INTEGER," + // 4: fatherIclave
                "\"CHILD\" INTEGER," + // 5: child
                "\"ORDER_ID\" INTEGER NOT NULL ," + // 6: orderId
                "\"ARTICLE_ID\" INTEGER NOT NULL ," + // 7: articleId
                "\"ICLAVE\" INTEGER NOT NULL );"); // 8: iclave
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ORDER_DETAIL_ORDER_ID_ICLAVE ON ORDER_DETAIL" +
                " (\"ORDER_ID\",\"ICLAVE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer existence = entity.getExistence();
        if (existence != null) {
            stmt.bindLong(2, existence);
        }
        stmt.bindLong(3, entity.getQuantity());
        stmt.bindString(4, entity.getType());
 
        Integer fatherIclave = entity.getFatherIclave();
        if (fatherIclave != null) {
            stmt.bindLong(5, fatherIclave);
        }
 
        Boolean child = entity.getChild();
        if (child != null) {
            stmt.bindLong(6, child ? 1L: 0L);
        }
        stmt.bindLong(7, entity.getOrderId());
        stmt.bindLong(8, entity.getArticleId());
        stmt.bindLong(9, entity.getIclave());
    }

    @Override
    protected void attachEntity(OrderDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderDetail readEntity(Cursor cursor, int offset) {
        OrderDetail entity = new OrderDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // existence
            cursor.getInt(offset + 2), // quantity
            cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // fatherIclave
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // child
            cursor.getLong(offset + 6), // orderId
            cursor.getLong(offset + 7), // articleId
            cursor.getInt(offset + 8) // iclave
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExistence(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setQuantity(cursor.getInt(offset + 2));
        entity.setType(cursor.getString(offset + 3));
        entity.setFatherIclave(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChild(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setOrderId(cursor.getLong(offset + 6));
        entity.setArticleId(cursor.getLong(offset + 7));
        entity.setIclave(cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "details" to-many relationship of OrderPicking. */
    public List<OrderDetail> _queryOrderPicking_Details(long orderId) {
        synchronized (this) {
            if (orderPicking_DetailsQuery == null) {
                QueryBuilder<OrderDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrderId.eq(null));
                orderPicking_DetailsQuery = queryBuilder.build();
            }
        }
        Query<OrderDetail> query = orderPicking_DetailsQuery.forCurrentThread();
        query.setParameter(0, orderId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrderPickingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVArticleDao().getAllColumns());
            builder.append(" FROM ORDER_DETAIL T");
            builder.append(" LEFT JOIN ORDER_PICKING T0 ON T.\"ORDER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN VARTICLE T1 ON T.\"ARTICLE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrderDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        OrderDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        OrderPicking order = loadCurrentOther(daoSession.getOrderPickingDao(), cursor, offset);
         if(order != null) {
            entity.setOrder(order);
        }
        offset += daoSession.getOrderPickingDao().getAllColumns().length;

        VArticle article = loadCurrentOther(daoSession.getVArticleDao(), cursor, offset);
         if(article != null) {
            entity.setArticle(article);
        }

        return entity;    
    }

    public OrderDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrderDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrderDetail> list = new ArrayList<OrderDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrderDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrderDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
