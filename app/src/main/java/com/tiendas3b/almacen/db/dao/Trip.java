package com.tiendas3b.almacen.db.dao;

import java.util.List;
import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TRIP".
 */
public class Trip {

    private Long id;
    private long sequence;
    private long regionId;
    private long truckId;
    /** Not-null value. */
    private java.util.Date date;
    private Long routeTypeId;
    private Double linearDistance;
    private Double routeDistance;
    private Double timeDistance;
    private int status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TripDao myDao;

    private Truck truck;
    private Long truck__resolvedKey;

    private List<TripDetail> tripDetailList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Trip() {
    }

    public Trip(Long id) {
        this.id = id;
    }

    public Trip(Long id, long sequence, long regionId, long truckId, java.util.Date date, Long routeTypeId, Double linearDistance, Double routeDistance, Double timeDistance, int status) {
        this.id = id;
        this.sequence = sequence;
        this.regionId = regionId;
        this.truckId = truckId;
        this.date = date;
        this.routeTypeId = routeTypeId;
        this.linearDistance = linearDistance;
        this.routeDistance = routeDistance;
        this.timeDistance = timeDistance;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTripDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getSequence() {
        return sequence;
    }

    public void setSequence(long sequence) {
        this.sequence = sequence;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getTruckId() {
        return truckId;
    }

    public void setTruckId(long truckId) {
        this.truckId = truckId;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getRouteTypeId() {
        return routeTypeId;
    }

    public void setRouteTypeId(Long routeTypeId) {
        this.routeTypeId = routeTypeId;
    }

    public Double getLinearDistance() {
        return linearDistance;
    }

    public void setLinearDistance(Double linearDistance) {
        this.linearDistance = linearDistance;
    }

    public Double getRouteDistance() {
        return routeDistance;
    }

    public void setRouteDistance(Double routeDistance) {
        this.routeDistance = routeDistance;
    }

    public Double getTimeDistance() {
        return timeDistance;
    }

    public void setTimeDistance(Double timeDistance) {
        this.timeDistance = timeDistance;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    /** To-one relationship, resolved on first access. */
    public Truck getTruck() {
        long __key = this.truckId;
        if (truck__resolvedKey == null || !truck__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TruckDao targetDao = daoSession.getTruckDao();
            Truck truckNew = targetDao.load(__key);
            synchronized (this) {
                truck = truckNew;
            	truck__resolvedKey = __key;
            }
        }
        return truck;
    }

    public void setTruck(Truck truck) {
        if (truck == null) {
            throw new DaoException("To-one property 'truckId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.truck = truck;
            truckId = truck.getId();
            truck__resolvedKey = truckId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TripDetail> getTripDetailList() {
        if (tripDetailList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TripDetailDao targetDao = daoSession.getTripDetailDao();
            List<TripDetail> tripDetailListNew = targetDao._queryTrip_TripDetailList(id);
            synchronized (this) {
                if(tripDetailList == null) {
                    tripDetailList = tripDetailListNew;
                }
            }
        }
        return tripDetailList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTripDetailList() {
        tripDetailList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
