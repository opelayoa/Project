package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.ExpressArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESS_ARTICLE".
*/
public class ExpressArticleDao extends AbstractDao<ExpressArticle, Long> {

    public static final String TABLENAME = "EXPRESS_ARTICLE";

    /**
     * Properties of entity ExpressArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Unity = new Property(2, String.class, "unity", false, "UNITY");
        public final static Property ArticleType = new Property(3, String.class, "articleType", false, "ARTICLE_TYPE");
        public final static Property PalletType = new Property(4, String.class, "palletType", false, "PALLET_TYPE");
        public final static Property Iclave = new Property(5, Integer.class, "iclave", false, "ICLAVE");
        public final static Property Odc = new Property(6, Integer.class, "odc", false, "ODC");
        public final static Property PiecesOdc = new Property(7, Integer.class, "piecesOdc", false, "PIECES_ODC");
        public final static Property BoxesOdc = new Property(8, Integer.class, "boxesOdc", false, "BOXES_ODC");
        public final static Property PalletsOdc = new Property(9, Integer.class, "palletsOdc", false, "PALLETS_ODC");
        public final static Property PiecesAsn = new Property(10, Integer.class, "piecesAsn", false, "PIECES_ASN");
        public final static Property BoxesAsn = new Property(11, Integer.class, "boxesAsn", false, "BOXES_ASN");
        public final static Property PalletsAsn = new Property(12, Integer.class, "palletsAsn", false, "PALLETS_ASN");
        public final static Property PiecesEm = new Property(13, Integer.class, "piecesEm", false, "PIECES_EM");
        public final static Property BoxesEm = new Property(14, Integer.class, "boxesEm", false, "BOXES_EM");
        public final static Property PalletsEm = new Property(15, Integer.class, "palletsEm", false, "PALLETS_EM");
        public final static Property PiecesBill = new Property(16, Integer.class, "piecesBill", false, "PIECES_BILL");
        public final static Property BoxesBill = new Property(17, Integer.class, "boxesBill", false, "BOXES_BILL");
        public final static Property PalletsBill = new Property(18, Integer.class, "palletsBill", false, "PALLETS_BILL");
        public final static Property PiecesByBox = new Property(19, Integer.class, "piecesByBox", false, "PIECES_BY_BOX");
        public final static Property BoxesByBed = new Property(20, Integer.class, "boxesByBed", false, "BOXES_BY_BED");
        public final static Property BedByPallet = new Property(21, Integer.class, "bedByPallet", false, "BED_BY_PALLET");
        public final static Property BoxesByPallet = new Property(22, Integer.class, "boxesByPallet", false, "BOXES_BY_PALLET");
        public final static Property LastPallet = new Property(23, Integer.class, "lastPallet", false, "LAST_PALLET");
        public final static Property FolioEm = new Property(24, Integer.class, "folioEm", false, "FOLIO_EM");
        public final static Property RegionId = new Property(25, long.class, "regionId", false, "REGION_ID");
        public final static Property ProviderId = new Property(26, long.class, "providerId", false, "PROVIDER_ID");
    };

    private DaoSession daoSession;


    public ExpressArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESS_ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DESCRIPTION\" TEXT," + // 1: description
                "\"UNITY\" TEXT," + // 2: unity
                "\"ARTICLE_TYPE\" TEXT," + // 3: articleType
                "\"PALLET_TYPE\" TEXT," + // 4: palletType
                "\"ICLAVE\" INTEGER," + // 5: iclave
                "\"ODC\" INTEGER," + // 6: odc
                "\"PIECES_ODC\" INTEGER," + // 7: piecesOdc
                "\"BOXES_ODC\" INTEGER," + // 8: boxesOdc
                "\"PALLETS_ODC\" INTEGER," + // 9: palletsOdc
                "\"PIECES_ASN\" INTEGER," + // 10: piecesAsn
                "\"BOXES_ASN\" INTEGER," + // 11: boxesAsn
                "\"PALLETS_ASN\" INTEGER," + // 12: palletsAsn
                "\"PIECES_EM\" INTEGER," + // 13: piecesEm
                "\"BOXES_EM\" INTEGER," + // 14: boxesEm
                "\"PALLETS_EM\" INTEGER," + // 15: palletsEm
                "\"PIECES_BILL\" INTEGER," + // 16: piecesBill
                "\"BOXES_BILL\" INTEGER," + // 17: boxesBill
                "\"PALLETS_BILL\" INTEGER," + // 18: palletsBill
                "\"PIECES_BY_BOX\" INTEGER," + // 19: piecesByBox
                "\"BOXES_BY_BED\" INTEGER," + // 20: boxesByBed
                "\"BED_BY_PALLET\" INTEGER," + // 21: bedByPallet
                "\"BOXES_BY_PALLET\" INTEGER," + // 22: boxesByPallet
                "\"LAST_PALLET\" INTEGER," + // 23: lastPallet
                "\"FOLIO_EM\" INTEGER," + // 24: folioEm
                "\"REGION_ID\" INTEGER NOT NULL ," + // 25: regionId
                "\"PROVIDER_ID\" INTEGER NOT NULL );"); // 26: providerId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EXPRESS_ARTICLE_REGION_ID_PROVIDER_ID_ODC_ICLAVE ON EXPRESS_ARTICLE" +
                " (\"REGION_ID\",\"PROVIDER_ID\",\"ODC\",\"ICLAVE\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESS_ARTICLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExpressArticle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String unity = entity.getUnity();
        if (unity != null) {
            stmt.bindString(3, unity);
        }
 
        String articleType = entity.getArticleType();
        if (articleType != null) {
            stmt.bindString(4, articleType);
        }
 
        String palletType = entity.getPalletType();
        if (palletType != null) {
            stmt.bindString(5, palletType);
        }
 
        Integer iclave = entity.getIclave();
        if (iclave != null) {
            stmt.bindLong(6, iclave);
        }
 
        Integer odc = entity.getOdc();
        if (odc != null) {
            stmt.bindLong(7, odc);
        }
 
        Integer piecesOdc = entity.getPiecesOdc();
        if (piecesOdc != null) {
            stmt.bindLong(8, piecesOdc);
        }
 
        Integer boxesOdc = entity.getBoxesOdc();
        if (boxesOdc != null) {
            stmt.bindLong(9, boxesOdc);
        }
 
        Integer palletsOdc = entity.getPalletsOdc();
        if (palletsOdc != null) {
            stmt.bindLong(10, palletsOdc);
        }
 
        Integer piecesAsn = entity.getPiecesAsn();
        if (piecesAsn != null) {
            stmt.bindLong(11, piecesAsn);
        }
 
        Integer boxesAsn = entity.getBoxesAsn();
        if (boxesAsn != null) {
            stmt.bindLong(12, boxesAsn);
        }
 
        Integer palletsAsn = entity.getPalletsAsn();
        if (palletsAsn != null) {
            stmt.bindLong(13, palletsAsn);
        }
 
        Integer piecesEm = entity.getPiecesEm();
        if (piecesEm != null) {
            stmt.bindLong(14, piecesEm);
        }
 
        Integer boxesEm = entity.getBoxesEm();
        if (boxesEm != null) {
            stmt.bindLong(15, boxesEm);
        }
 
        Integer palletsEm = entity.getPalletsEm();
        if (palletsEm != null) {
            stmt.bindLong(16, palletsEm);
        }
 
        Integer piecesBill = entity.getPiecesBill();
        if (piecesBill != null) {
            stmt.bindLong(17, piecesBill);
        }
 
        Integer boxesBill = entity.getBoxesBill();
        if (boxesBill != null) {
            stmt.bindLong(18, boxesBill);
        }
 
        Integer palletsBill = entity.getPalletsBill();
        if (palletsBill != null) {
            stmt.bindLong(19, palletsBill);
        }
 
        Integer piecesByBox = entity.getPiecesByBox();
        if (piecesByBox != null) {
            stmt.bindLong(20, piecesByBox);
        }
 
        Integer boxesByBed = entity.getBoxesByBed();
        if (boxesByBed != null) {
            stmt.bindLong(21, boxesByBed);
        }
 
        Integer bedByPallet = entity.getBedByPallet();
        if (bedByPallet != null) {
            stmt.bindLong(22, bedByPallet);
        }
 
        Integer boxesByPallet = entity.getBoxesByPallet();
        if (boxesByPallet != null) {
            stmt.bindLong(23, boxesByPallet);
        }
 
        Integer lastPallet = entity.getLastPallet();
        if (lastPallet != null) {
            stmt.bindLong(24, lastPallet);
        }
 
        Integer folioEm = entity.getFolioEm();
        if (folioEm != null) {
            stmt.bindLong(25, folioEm);
        }
        stmt.bindLong(26, entity.getRegionId());
        stmt.bindLong(27, entity.getProviderId());
    }

    @Override
    protected void attachEntity(ExpressArticle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExpressArticle readEntity(Cursor cursor, int offset) {
        ExpressArticle entity = new ExpressArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // unity
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // articleType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // palletType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // iclave
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // odc
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // piecesOdc
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // boxesOdc
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // palletsOdc
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // piecesAsn
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // boxesAsn
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // palletsAsn
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // piecesEm
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // boxesEm
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // palletsEm
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // piecesBill
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // boxesBill
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // palletsBill
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // piecesByBox
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // boxesByBed
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // bedByPallet
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // boxesByPallet
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // lastPallet
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // folioEm
            cursor.getLong(offset + 25), // regionId
            cursor.getLong(offset + 26) // providerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExpressArticle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArticleType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPalletType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIclave(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setOdc(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPiecesOdc(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBoxesOdc(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPalletsOdc(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPiecesAsn(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBoxesAsn(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPalletsAsn(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setPiecesEm(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setBoxesEm(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setPalletsEm(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setPiecesBill(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setBoxesBill(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setPalletsBill(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setPiecesByBox(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setBoxesByBed(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setBedByPallet(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setBoxesByPallet(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setLastPallet(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setFolioEm(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setRegionId(cursor.getLong(offset + 25));
        entity.setProviderId(cursor.getLong(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExpressArticle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExpressArticle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProviderDao().getAllColumns());
            builder.append(" FROM EXPRESS_ARTICLE T");
            builder.append(" LEFT JOIN REGION T0 ON T.\"REGION_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PROVIDER T1 ON T.\"PROVIDER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExpressArticle loadCurrentDeep(Cursor cursor, boolean lock) {
        ExpressArticle entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }
        offset += daoSession.getRegionDao().getAllColumns().length;

        Provider provider = loadCurrentOther(daoSession.getProviderDao(), cursor, offset);
         if(provider != null) {
            entity.setProvider(provider);
        }

        return entity;    
    }

    public ExpressArticle loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExpressArticle> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExpressArticle> list = new ArrayList<ExpressArticle>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExpressArticle> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExpressArticle> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
