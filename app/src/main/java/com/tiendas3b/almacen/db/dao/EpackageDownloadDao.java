package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.EpackageDownload;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EPACKAGE_DOWNLOAD".
*/
public class EpackageDownloadDao extends AbstractDao<EpackageDownload, Long> {

    public static final String TABLENAME = "EPACKAGE_DOWNLOAD";

    /**
     * Properties of entity EpackageDownload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Activo = new Property(1, Integer.class, "activo", false, "ACTIVO");
        public final static Property StatusLeave = new Property(2, Integer.class, "statusLeave", false, "STATUS_LEAVE");
        public final static Property TarjetStatus = new Property(3, Integer.class, "tarjetStatus", false, "TARJET_STATUS");
        public final static Property Fecha = new Property(4, String.class, "fecha", false, "FECHA");
        public final static Property Almacen = new Property(5, long.class, "almacen", false, "ALMACEN");
        public final static Property CamClave = new Property(6, long.class, "camClave", false, "CAM_CLAVE");
        public final static Property PackageId = new Property(7, long.class, "packageId", false, "PACKAGE_ID");
    };


    public EpackageDownloadDao(DaoConfig config) {
        super(config);
    }
    
    public EpackageDownloadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EPACKAGE_DOWNLOAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACTIVO\" INTEGER," + // 1: activo
                "\"STATUS_LEAVE\" INTEGER," + // 2: statusLeave
                "\"TARJET_STATUS\" INTEGER," + // 3: tarjetStatus
                "\"FECHA\" TEXT," + // 4: fecha
                "\"ALMACEN\" INTEGER NOT NULL ," + // 5: almacen
                "\"CAM_CLAVE\" INTEGER NOT NULL ," + // 6: camClave
                "\"PACKAGE_ID\" INTEGER NOT NULL );"); // 7: packageId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EPACKAGE_DOWNLOAD_ALMACEN_CAM_CLAVE_PACKAGE_ID ON EPACKAGE_DOWNLOAD" +
                " (\"ALMACEN\",\"CAM_CLAVE\",\"PACKAGE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EPACKAGE_DOWNLOAD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EpackageDownload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer activo = entity.getActivo();
        if (activo != null) {
            stmt.bindLong(2, activo);
        }
 
        Integer statusLeave = entity.getStatusLeave();
        if (statusLeave != null) {
            stmt.bindLong(3, statusLeave);
        }
 
        Integer tarjetStatus = entity.getTarjetStatus();
        if (tarjetStatus != null) {
            stmt.bindLong(4, tarjetStatus);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(5, fecha);
        }
        stmt.bindLong(6, entity.getAlmacen());
        stmt.bindLong(7, entity.getCamClave());
        stmt.bindLong(8, entity.getPackageId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EpackageDownload readEntity(Cursor cursor, int offset) {
        EpackageDownload entity = new EpackageDownload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // activo
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // statusLeave
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tarjetStatus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fecha
            cursor.getLong(offset + 5), // almacen
            cursor.getLong(offset + 6), // camClave
            cursor.getLong(offset + 7) // packageId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EpackageDownload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActivo(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStatusLeave(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTarjetStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFecha(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlmacen(cursor.getLong(offset + 5));
        entity.setCamClave(cursor.getLong(offset + 6));
        entity.setPackageId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EpackageDownload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EpackageDownload entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
