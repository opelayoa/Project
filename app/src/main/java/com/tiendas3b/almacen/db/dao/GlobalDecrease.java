package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "GLOBAL_DECREASE".
 */
public class GlobalDecrease extends EqualsBase  {

    private Long id;
    private Integer numreg;
    private Integer numarts;
    private Integer amount;
    private Float cost;
    private Float sale;
    private Float amountAvg;
    private Float costAvg;
    private Float saleAvg;
    private long regionId;
    /** Not-null value. */
    private java.util.Date date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GlobalDecreaseDao myDao;

    private Region region;
    private Long region__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GlobalDecrease() {
    }

    public GlobalDecrease(Long id) {
        this.id = id;
    }

    public GlobalDecrease(Long id, Integer numreg, Integer numarts, Integer amount, Float cost, Float sale, Float amountAvg, Float costAvg, Float saleAvg, long regionId, java.util.Date date) {
        this.id = id;
        this.numreg = numreg;
        this.numarts = numarts;
        this.amount = amount;
        this.cost = cost;
        this.sale = sale;
        this.amountAvg = amountAvg;
        this.costAvg = costAvg;
        this.saleAvg = saleAvg;
        this.regionId = regionId;
        this.date = date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGlobalDecreaseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getNumreg() {
        return numreg;
    }

    public void setNumreg(Integer numreg) {
        this.numreg = numreg;
    }

    public Integer getNumarts() {
        return numarts;
    }

    public void setNumarts(Integer numarts) {
        this.numarts = numarts;
    }

    public Integer getAmount() {
        return amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public Float getCost() {
        return cost;
    }

    public void setCost(Float cost) {
        this.cost = cost;
    }

    public Float getSale() {
        return sale;
    }

    public void setSale(Float sale) {
        this.sale = sale;
    }

    public Float getAmountAvg() {
        return amountAvg;
    }

    public void setAmountAvg(Float amountAvg) {
        this.amountAvg = amountAvg;
    }

    public Float getCostAvg() {
        return costAvg;
    }

    public void setCostAvg(Float costAvg) {
        this.costAvg = costAvg;
    }

    public Float getSaleAvg() {
        return saleAvg;
    }

    public void setSaleAvg(Float saleAvg) {
        this.saleAvg = saleAvg;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
