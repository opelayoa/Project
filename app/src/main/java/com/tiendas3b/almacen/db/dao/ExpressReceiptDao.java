package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.ExpressReceipt;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESS_RECEIPT".
*/
public class ExpressReceiptDao extends AbstractDao<ExpressReceipt, Long> {

    public static final String TABLENAME = "EXPRESS_RECEIPT";

    /**
     * Properties of entity ExpressReceipt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, String.class, "barcode", false, "BARCODE");
        public final static Property BrandType = new Property(2, String.class, "brandType", false, "BRAND_TYPE");
        public final static Property ExpirationDate = new Property(3, String.class, "expirationDate", false, "EXPIRATION_DATE");
        public final static Property BoxesPallet = new Property(4, Integer.class, "boxesPallet", false, "BOXES_PALLET");
        public final static Property Folio = new Property(5, Integer.class, "folio", false, "FOLIO");
        public final static Property FolioOdc = new Property(6, Integer.class, "folioOdc", false, "FOLIO_ODC");
        public final static Property FolioReceipt = new Property(7, Integer.class, "folioReceipt", false, "FOLIO_RECEIPT");
        public final static Property Iclave = new Property(8, Integer.class, "iclave", false, "ICLAVE");
        public final static Property Cantidad = new Property(9, int.class, "cantidad", false, "CANTIDAD");
        public final static Property Lote = new Property(10, String.class, "lote", false, "LOTE");
        public final static Property Received = new Property(11, Boolean.class, "received", false, "RECEIVED");
        public final static Property ScaffoldNum = new Property(12, Short.class, "scaffoldNum", false, "SCAFFOLD_NUM");
        public final static Property Unit = new Property(13, String.class, "unit", false, "UNIT");
        public final static Property UnitType = new Property(14, String.class, "unitType", false, "UNIT_TYPE");
        public final static Property RegionId = new Property(15, long.class, "regionId", false, "REGION_ID");
        public final static Property BuyDetailId = new Property(16, long.class, "buyDetailId", false, "BUY_DETAIL_ID");
    };

    private DaoSession daoSession;


    public ExpressReceiptDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressReceiptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESS_RECEIPT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BARCODE\" TEXT," + // 1: barcode
                "\"BRAND_TYPE\" TEXT," + // 2: brandType
                "\"EXPIRATION_DATE\" TEXT," + // 3: expirationDate
                "\"BOXES_PALLET\" INTEGER," + // 4: boxesPallet
                "\"FOLIO\" INTEGER," + // 5: folio
                "\"FOLIO_ODC\" INTEGER," + // 6: folioOdc
                "\"FOLIO_RECEIPT\" INTEGER," + // 7: folioReceipt
                "\"ICLAVE\" INTEGER," + // 8: iclave
                "\"CANTIDAD\" INTEGER NOT NULL ," + // 9: cantidad
                "\"LOTE\" TEXT," + // 10: lote
                "\"RECEIVED\" INTEGER," + // 11: received
                "\"SCAFFOLD_NUM\" INTEGER," + // 12: scaffoldNum
                "\"UNIT\" TEXT," + // 13: unit
                "\"UNIT_TYPE\" TEXT," + // 14: unitType
                "\"REGION_ID\" INTEGER NOT NULL ," + // 15: regionId
                "\"BUY_DETAIL_ID\" INTEGER NOT NULL );"); // 16: buyDetailId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EXPRESS_RECEIPT_REGION_ID_FOLIO_ODC_ICLAVE_SCAFFOLD_NUM ON EXPRESS_RECEIPT" +
                " (\"REGION_ID\",\"FOLIO_ODC\",\"ICLAVE\",\"SCAFFOLD_NUM\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESS_RECEIPT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExpressReceipt entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(2, barcode);
        }
 
        String brandType = entity.getBrandType();
        if (brandType != null) {
            stmt.bindString(3, brandType);
        }
 
        String expirationDate = entity.getExpirationDate();
        if (expirationDate != null) {
            stmt.bindString(4, expirationDate);
        }
 
        Integer boxesPallet = entity.getBoxesPallet();
        if (boxesPallet != null) {
            stmt.bindLong(5, boxesPallet);
        }
 
        Integer folio = entity.getFolio();
        if (folio != null) {
            stmt.bindLong(6, folio);
        }
 
        Integer folioOdc = entity.getFolioOdc();
        if (folioOdc != null) {
            stmt.bindLong(7, folioOdc);
        }
 
        Integer folioReceipt = entity.getFolioReceipt();
        if (folioReceipt != null) {
            stmt.bindLong(8, folioReceipt);
        }
 
        Integer iclave = entity.getIclave();
        if (iclave != null) {
            stmt.bindLong(9, iclave);
        }
        stmt.bindLong(10, entity.getCantidad());
 
        String lote = entity.getLote();
        if (lote != null) {
            stmt.bindString(11, lote);
        }
 
        Boolean received = entity.getReceived();
        if (received != null) {
            stmt.bindLong(12, received ? 1L: 0L);
        }
 
        Short scaffoldNum = entity.getScaffoldNum();
        if (scaffoldNum != null) {
            stmt.bindLong(13, scaffoldNum);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(14, unit);
        }
 
        String unitType = entity.getUnitType();
        if (unitType != null) {
            stmt.bindString(15, unitType);
        }
        stmt.bindLong(16, entity.getRegionId());
        stmt.bindLong(17, entity.getBuyDetailId());
    }

    @Override
    protected void attachEntity(ExpressReceipt entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExpressReceipt readEntity(Cursor cursor, int offset) {
        ExpressReceipt entity = new ExpressReceipt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // brandType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expirationDate
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // boxesPallet
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // folio
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // folioOdc
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // folioReceipt
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // iclave
            cursor.getInt(offset + 9), // cantidad
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lote
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // received
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // scaffoldNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // unit
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // unitType
            cursor.getLong(offset + 15), // regionId
            cursor.getLong(offset + 16) // buyDetailId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExpressReceipt entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBrandType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpirationDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBoxesPallet(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFolio(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFolioOdc(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFolioReceipt(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIclave(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCantidad(cursor.getInt(offset + 9));
        entity.setLote(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReceived(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setScaffoldNum(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setUnit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnitType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRegionId(cursor.getLong(offset + 15));
        entity.setBuyDetailId(cursor.getLong(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExpressReceipt entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExpressReceipt entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getBuyDetailDao().getAllColumns());
            builder.append(" FROM EXPRESS_RECEIPT T");
            builder.append(" LEFT JOIN REGION T0 ON T.\"REGION_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN BUY_DETAIL T1 ON T.\"BUY_DETAIL_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ExpressReceipt loadCurrentDeep(Cursor cursor, boolean lock) {
        ExpressReceipt entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }
        offset += daoSession.getRegionDao().getAllColumns().length;

        BuyDetail buyDetail = loadCurrentOther(daoSession.getBuyDetailDao(), cursor, offset);
         if(buyDetail != null) {
            entity.setBuyDetail(buyDetail);
        }

        return entity;    
    }

    public ExpressReceipt loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ExpressReceipt> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ExpressReceipt> list = new ArrayList<ExpressReceipt>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ExpressReceipt> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ExpressReceipt> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
