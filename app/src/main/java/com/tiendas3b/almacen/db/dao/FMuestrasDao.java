package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.FMuestras;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FMUESTRAS".
*/
public class FMuestrasDao extends AbstractDao<FMuestras, Void> {

    public static final String TABLENAME = "FMUESTRAS";

    /**
     * Properties of entity FMuestras.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tclave = new Property(0, String.class, "tclave", false, "TCLAVE");
        public final static Property Iclave = new Property(1, Long.class, "iclave", false, "ICLAVE");
        public final static Property Pclave = new Property(2, Long.class, "pclave", false, "PCLAVE");
        public final static Property Fecha = new Property(3, String.class, "fecha", false, "FECHA");
        public final static Property Odc = new Property(4, Integer.class, "odc", false, "ODC");
        public final static Property Lote = new Property(5, String.class, "lote", false, "LOTE");
        public final static Property FechaCaducidad = new Property(6, String.class, "fechaCaducidad", false, "FECHA_CADUCIDAD");
        public final static Property Cantidad = new Property(7, Integer.class, "cantidad", false, "CANTIDAD");
        public final static Property UserId = new Property(8, Integer.class, "userId", false, "USER_ID");
    };


    public FMuestrasDao(DaoConfig config) {
        super(config);
    }
    
    public FMuestrasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FMUESTRAS\" (" + //
                "\"TCLAVE\" TEXT," + // 0: tclave
                "\"ICLAVE\" INTEGER," + // 1: iclave
                "\"PCLAVE\" INTEGER," + // 2: pclave
                "\"FECHA\" TEXT," + // 3: fecha
                "\"ODC\" INTEGER," + // 4: odc
                "\"LOTE\" TEXT," + // 5: lote
                "\"FECHA_CADUCIDAD\" TEXT," + // 6: fechaCaducidad
                "\"CANTIDAD\" INTEGER," + // 7: cantidad
                "\"USER_ID\" INTEGER);"); // 8: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FMUESTRAS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FMuestras entity) {
        stmt.clearBindings();
 
        String tclave = entity.getTclave();
        if (tclave != null) {
            stmt.bindString(1, tclave);
        }
 
        Long iclave = entity.getIclave();
        if (iclave != null) {
            stmt.bindLong(2, iclave);
        }
 
        Long pclave = entity.getPclave();
        if (pclave != null) {
            stmt.bindLong(3, pclave);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(4, fecha);
        }
 
        Integer odc = entity.getOdc();
        if (odc != null) {
            stmt.bindLong(5, odc);
        }
 
        String lote = entity.getLote();
        if (lote != null) {
            stmt.bindString(6, lote);
        }
 
        String fechaCaducidad = entity.getFechaCaducidad();
        if (fechaCaducidad != null) {
            stmt.bindString(7, fechaCaducidad);
        }
 
        Integer cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(8, cantidad);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FMuestras readEntity(Cursor cursor, int offset) {
        FMuestras entity = new FMuestras( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tclave
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // iclave
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // pclave
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fecha
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // odc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lote
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fechaCaducidad
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // cantidad
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FMuestras entity, int offset) {
        entity.setTclave(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIclave(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPclave(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFecha(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOdc(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFechaCaducidad(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCantidad(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FMuestras entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FMuestras entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
