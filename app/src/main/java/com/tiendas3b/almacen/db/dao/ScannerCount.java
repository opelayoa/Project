package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "SCANNER_COUNT".
 */
public class ScannerCount extends EqualsBase  {

    private Long id;
    private Integer folio;
    private Integer amount;
    private long regionId;
    private long varticleId;
    private long iclave;
    /** Not-null value. */
    private String date;
    private long seq;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ScannerCountDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private VArticle varticle;
    private Long varticle__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ScannerCount() {
    }

    public ScannerCount(Long id) {
        this.id = id;
    }

    public ScannerCount(Long id, Integer folio, Integer amount, long regionId, long varticleId, long iclave, String date, long seq) {
        this.id = id;
        this.folio = folio;
        this.amount = amount;
        this.regionId = regionId;
        this.varticleId = varticleId;
        this.iclave = iclave;
        this.date = date;
        this.seq = seq;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScannerCountDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getFolio() {
        return folio;
    }

    public void setFolio(Integer folio) {
        this.folio = folio;
    }

    public Integer getAmount() {
        return amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getVarticleId() {
        return varticleId;
    }

    public void setVarticleId(long varticleId) {
        this.varticleId = varticleId;
    }

    public long getIclave() {
        return iclave;
    }

    public void setIclave(long iclave) {
        this.iclave = iclave;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    public long getSeq() {
        return seq;
    }

    public void setSeq(long seq) {
        this.seq = seq;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public VArticle getVarticle() {
        long __key = this.varticleId;
        if (varticle__resolvedKey == null || !varticle__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VArticleDao targetDao = daoSession.getVArticleDao();
            VArticle varticleNew = targetDao.load(__key);
            synchronized (this) {
                varticle = varticleNew;
            	varticle__resolvedKey = __key;
            }
        }
        return varticle;
    }

    public void setVarticle(VArticle varticle) {
        if (varticle == null) {
            throw new DaoException("To-one property 'varticleId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.varticle = varticle;
            varticleId = varticle.getId();
            varticle__resolvedKey = varticleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
