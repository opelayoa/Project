package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.ReceiptSheetCapture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECEIPT_SHEET_CAPTURE".
*/
public class ReceiptSheetCaptureDao extends AbstractDao<ReceiptSheetCapture, Long> {

    public static final String TABLENAME = "RECEIPT_SHEET_CAPTURE";

    /**
     * Properties of entity ReceiptSheetCapture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DateTime = new Property(1, String.class, "dateTime", false, "DATE_TIME");
        public final static Property ArriveTime = new Property(2, String.class, "arriveTime", false, "ARRIVE_TIME");
        public final static Property DeliveryTime = new Property(3, String.class, "deliveryTime", false, "DELIVERY_TIME");
        public final static Property DepartureTime = new Property(4, String.class, "departureTime", false, "DEPARTURE_TIME");
        public final static Property Arrive = new Property(5, Integer.class, "arrive", false, "ARRIVE");
        public final static Property NumReceivers = new Property(6, Integer.class, "numReceivers", false, "NUM_RECEIVERS");
        public final static Property Paletizado = new Property(7, Integer.class, "paletizado", false, "PALETIZADO");
        public final static Property AmountFact = new Property(8, Float.class, "amountFact", false, "AMOUNT_FACT");
        public final static Property AmountEm = new Property(9, Float.class, "amountEm", false, "AMOUNT_EM");
        public final static Property Iva = new Property(10, Float.class, "iva", false, "IVA");
        public final static Property Ieps = new Property(11, Float.class, "ieps", false, "IEPS");
        public final static Property Deliveryman = new Property(12, String.class, "deliveryman", false, "DELIVERYMAN");
        public final static Property Receiver = new Property(13, String.class, "receiver", false, "RECEIVER");
        public final static Property Platform = new Property(14, Integer.class, "platform", false, "PLATFORM");
        public final static Property LevelId = new Property(15, Long.class, "levelId", false, "LEVEL_ID");
        public final static Property DateTypeId = new Property(16, Long.class, "dateTypeId", false, "DATE_TYPE_ID");
        public final static Property BuyId = new Property(17, long.class, "buyId", false, "BUY_ID");
        public final static Property ReceiptDate = new Property(18, String.class, "receiptDate", false, "RECEIPT_DATE");
        public final static Property Odc = new Property(19, int.class, "odc", false, "ODC");
        public final static Property FacturaRef = new Property(20, String.class, "facturaRef", false, "FACTURA_REF");
    };

    private DaoSession daoSession;


    public ReceiptSheetCaptureDao(DaoConfig config) {
        super(config);
    }
    
    public ReceiptSheetCaptureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECEIPT_SHEET_CAPTURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE_TIME\" TEXT," + // 1: dateTime
                "\"ARRIVE_TIME\" TEXT," + // 2: arriveTime
                "\"DELIVERY_TIME\" TEXT," + // 3: deliveryTime
                "\"DEPARTURE_TIME\" TEXT," + // 4: departureTime
                "\"ARRIVE\" INTEGER," + // 5: arrive
                "\"NUM_RECEIVERS\" INTEGER," + // 6: numReceivers
                "\"PALETIZADO\" INTEGER," + // 7: paletizado
                "\"AMOUNT_FACT\" REAL," + // 8: amountFact
                "\"AMOUNT_EM\" REAL," + // 9: amountEm
                "\"IVA\" REAL," + // 10: iva
                "\"IEPS\" REAL," + // 11: ieps
                "\"DELIVERYMAN\" TEXT," + // 12: deliveryman
                "\"RECEIVER\" TEXT," + // 13: receiver
                "\"PLATFORM\" INTEGER," + // 14: platform
                "\"LEVEL_ID\" INTEGER," + // 15: levelId
                "\"DATE_TYPE_ID\" INTEGER," + // 16: dateTypeId
                "\"BUY_ID\" INTEGER NOT NULL ," + // 17: buyId
                "\"RECEIPT_DATE\" TEXT NOT NULL ," + // 18: receiptDate
                "\"ODC\" INTEGER NOT NULL ," + // 19: odc
                "\"FACTURA_REF\" TEXT);"); // 20: facturaRef
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_RECEIPT_SHEET_CAPTURE_RECEIPT_DATE_BUY_ID ON RECEIPT_SHEET_CAPTURE" +
                " (\"RECEIPT_DATE\",\"BUY_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECEIPT_SHEET_CAPTURE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReceiptSheetCapture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(2, dateTime);
        }
 
        String arriveTime = entity.getArriveTime();
        if (arriveTime != null) {
            stmt.bindString(3, arriveTime);
        }
 
        String deliveryTime = entity.getDeliveryTime();
        if (deliveryTime != null) {
            stmt.bindString(4, deliveryTime);
        }
 
        String departureTime = entity.getDepartureTime();
        if (departureTime != null) {
            stmt.bindString(5, departureTime);
        }
 
        Integer arrive = entity.getArrive();
        if (arrive != null) {
            stmt.bindLong(6, arrive);
        }
 
        Integer numReceivers = entity.getNumReceivers();
        if (numReceivers != null) {
            stmt.bindLong(7, numReceivers);
        }
 
        Integer paletizado = entity.getPaletizado();
        if (paletizado != null) {
            stmt.bindLong(8, paletizado);
        }
 
        Float amountFact = entity.getAmountFact();
        if (amountFact != null) {
            stmt.bindDouble(9, amountFact);
        }
 
        Float amountEm = entity.getAmountEm();
        if (amountEm != null) {
            stmt.bindDouble(10, amountEm);
        }
 
        Float iva = entity.getIva();
        if (iva != null) {
            stmt.bindDouble(11, iva);
        }
 
        Float ieps = entity.getIeps();
        if (ieps != null) {
            stmt.bindDouble(12, ieps);
        }
 
        String deliveryman = entity.getDeliveryman();
        if (deliveryman != null) {
            stmt.bindString(13, deliveryman);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(14, receiver);
        }
 
        Integer platform = entity.getPlatform();
        if (platform != null) {
            stmt.bindLong(15, platform);
        }
 
        Long levelId = entity.getLevelId();
        if (levelId != null) {
            stmt.bindLong(16, levelId);
        }
 
        Long dateTypeId = entity.getDateTypeId();
        if (dateTypeId != null) {
            stmt.bindLong(17, dateTypeId);
        }
        stmt.bindLong(18, entity.getBuyId());
        stmt.bindString(19, entity.getReceiptDate());
        stmt.bindLong(20, entity.getOdc());
 
        String facturaRef = entity.getFacturaRef();
        if (facturaRef != null) {
            stmt.bindString(21, facturaRef);
        }
    }

    @Override
    protected void attachEntity(ReceiptSheetCapture entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReceiptSheetCapture readEntity(Cursor cursor, int offset) {
        ReceiptSheetCapture entity = new ReceiptSheetCapture( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // arriveTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deliveryTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // departureTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // arrive
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // numReceivers
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // paletizado
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // amountFact
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // amountEm
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // iva
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // ieps
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deliveryman
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // receiver
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // platform
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // levelId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // dateTypeId
            cursor.getLong(offset + 17), // buyId
            cursor.getString(offset + 18), // receiptDate
            cursor.getInt(offset + 19), // odc
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // facturaRef
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReceiptSheetCapture entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArriveTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeliveryTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartureTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArrive(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNumReceivers(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPaletizado(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setAmountFact(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setAmountEm(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setIva(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setIeps(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setDeliveryman(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReceiver(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPlatform(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setLevelId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setDateTypeId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setBuyId(cursor.getLong(offset + 17));
        entity.setReceiptDate(cursor.getString(offset + 18));
        entity.setOdc(cursor.getInt(offset + 19));
        entity.setFacturaRef(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReceiptSheetCapture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReceiptSheetCapture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLevelDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDateTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getBuyDao().getAllColumns());
            builder.append(" FROM RECEIPT_SHEET_CAPTURE T");
            builder.append(" LEFT JOIN LEVEL T0 ON T.\"LEVEL_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DATE_TYPE T1 ON T.\"DATE_TYPE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN BUY T2 ON T.\"BUY_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ReceiptSheetCapture loadCurrentDeep(Cursor cursor, boolean lock) {
        ReceiptSheetCapture entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Level level = loadCurrentOther(daoSession.getLevelDao(), cursor, offset);
        entity.setLevel(level);
        offset += daoSession.getLevelDao().getAllColumns().length;

        DateType dateType = loadCurrentOther(daoSession.getDateTypeDao(), cursor, offset);
        entity.setDateType(dateType);
        offset += daoSession.getDateTypeDao().getAllColumns().length;

        Buy buy = loadCurrentOther(daoSession.getBuyDao(), cursor, offset);
         if(buy != null) {
            entity.setBuy(buy);
        }

        return entity;    
    }

    public ReceiptSheetCapture loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ReceiptSheetCapture> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ReceiptSheetCapture> list = new ArrayList<ReceiptSheetCapture>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ReceiptSheetCapture> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ReceiptSheetCapture> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
