package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tiendas3b.almacen.db.dao.TripDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRIP_DETAIL".
*/
public class TripDetailDao extends AbstractDao<TripDetail, Long> {

    public static final String TABLENAME = "TRIP_DETAIL";

    /**
     * Properties of entity TripDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TripId = new Property(1, long.class, "tripId", false, "TRIP_ID");
        public final static Property Sequence = new Property(2, long.class, "sequence", false, "SEQUENCE");
        public final static Property StoreId = new Property(3, Long.class, "storeId", false, "STORE_ID");
        public final static Property StoreDescription = new Property(4, String.class, "storeDescription", false, "STORE_DESCRIPTION");
        public final static Property PalletsNumber = new Property(5, Long.class, "palletsNumber", false, "PALLETS_NUMBER");
        public final static Property UploadedPalletCounter = new Property(6, int.class, "uploadedPalletCounter", false, "UPLOADED_PALLET_COUNTER");
        public final static Property DeliveredPalletCounter = new Property(7, int.class, "deliveredPalletCounter", false, "DELIVERED_PALLET_COUNTER");
        public final static Property CollectedPalletTotal = new Property(8, int.class, "collectedPalletTotal", false, "COLLECTED_PALLET_TOTAL");
        public final static Property ReturnedPalletTotal = new Property(9, int.class, "returnedPalletTotal", false, "RETURNED_PALLET_TOTAL");
        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;

    private Query<TripDetail> trip_TripDetailListQuery;

    public TripDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TripDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRIP_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TRIP_ID\" INTEGER NOT NULL ," + // 1: tripId
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 2: sequence
                "\"STORE_ID\" INTEGER," + // 3: storeId
                "\"STORE_DESCRIPTION\" TEXT," + // 4: storeDescription
                "\"PALLETS_NUMBER\" INTEGER," + // 5: palletsNumber
                "\"UPLOADED_PALLET_COUNTER\" INTEGER NOT NULL ," + // 6: uploadedPalletCounter
                "\"DELIVERED_PALLET_COUNTER\" INTEGER NOT NULL ," + // 7: deliveredPalletCounter
                "\"COLLECTED_PALLET_TOTAL\" INTEGER NOT NULL ," + // 8: collectedPalletTotal
                "\"RETURNED_PALLET_TOTAL\" INTEGER NOT NULL ," + // 9: returnedPalletTotal
                "\"STATUS\" INTEGER NOT NULL );"); // 10: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRIP_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TripDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTripId());
        stmt.bindLong(3, entity.getSequence());
 
        Long storeId = entity.getStoreId();
        if (storeId != null) {
            stmt.bindLong(4, storeId);
        }
 
        String storeDescription = entity.getStoreDescription();
        if (storeDescription != null) {
            stmt.bindString(5, storeDescription);
        }
 
        Long palletsNumber = entity.getPalletsNumber();
        if (palletsNumber != null) {
            stmt.bindLong(6, palletsNumber);
        }
        stmt.bindLong(7, entity.getUploadedPalletCounter());
        stmt.bindLong(8, entity.getDeliveredPalletCounter());
        stmt.bindLong(9, entity.getCollectedPalletTotal());
        stmt.bindLong(10, entity.getReturnedPalletTotal());
        stmt.bindLong(11, entity.getStatus());
    }

    @Override
    protected void attachEntity(TripDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TripDetail readEntity(Cursor cursor, int offset) {
        TripDetail entity = new TripDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // tripId
            cursor.getLong(offset + 2), // sequence
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // storeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // storeDescription
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // palletsNumber
            cursor.getInt(offset + 6), // uploadedPalletCounter
            cursor.getInt(offset + 7), // deliveredPalletCounter
            cursor.getInt(offset + 8), // collectedPalletTotal
            cursor.getInt(offset + 9), // returnedPalletTotal
            cursor.getInt(offset + 10) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TripDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTripId(cursor.getLong(offset + 1));
        entity.setSequence(cursor.getLong(offset + 2));
        entity.setStoreId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStoreDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPalletsNumber(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUploadedPalletCounter(cursor.getInt(offset + 6));
        entity.setDeliveredPalletCounter(cursor.getInt(offset + 7));
        entity.setCollectedPalletTotal(cursor.getInt(offset + 8));
        entity.setReturnedPalletTotal(cursor.getInt(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TripDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TripDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tripDetailList" to-many relationship of Trip. */
    public List<TripDetail> _queryTrip_TripDetailList(long tripId) {
        synchronized (this) {
            if (trip_TripDetailListQuery == null) {
                QueryBuilder<TripDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TripId.eq(null));
                trip_TripDetailListQuery = queryBuilder.build();
            }
        }
        Query<TripDetail> query = trip_TripDetailListQuery.forCurrentThread();
        query.setParameter(0, tripId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTripDao().getAllColumns());
            builder.append(" FROM TRIP_DETAIL T");
            builder.append(" LEFT JOIN TRIP T0 ON T.\"TRIP_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TripDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        TripDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Trip trip = loadCurrentOther(daoSession.getTripDao(), cursor, offset);
         if(trip != null) {
            entity.setTrip(trip);
        }

        return entity;    
    }

    public TripDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TripDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TripDetail> list = new ArrayList<TripDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TripDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TripDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
