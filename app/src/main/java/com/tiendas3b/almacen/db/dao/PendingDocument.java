package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PENDING_DOCUMENT".
 */
public class PendingDocument extends EqualsBase  {

    private Long id;
    private Integer ta;
    private Integer taPieces;
    private Integer rt;
    private Integer rtPieces;
    private Integer taStore;
    private Integer rtStore;
    private long regionId;
    /** Not-null value. */
    private String date;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PendingDocumentDao myDao;

    private Region region;
    private Long region__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PendingDocument() {
    }

    public PendingDocument(Long id) {
        this.id = id;
    }

    public PendingDocument(Long id, Integer ta, Integer taPieces, Integer rt, Integer rtPieces, Integer taStore, Integer rtStore, long regionId, String date) {
        this.id = id;
        this.ta = ta;
        this.taPieces = taPieces;
        this.rt = rt;
        this.rtPieces = rtPieces;
        this.taStore = taStore;
        this.rtStore = rtStore;
        this.regionId = regionId;
        this.date = date;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPendingDocumentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getTa() {
        return ta;
    }

    public void setTa(Integer ta) {
        this.ta = ta;
    }

    public Integer getTaPieces() {
        return taPieces;
    }

    public void setTaPieces(Integer taPieces) {
        this.taPieces = taPieces;
    }

    public Integer getRt() {
        return rt;
    }

    public void setRt(Integer rt) {
        this.rt = rt;
    }

    public Integer getRtPieces() {
        return rtPieces;
    }

    public void setRtPieces(Integer rtPieces) {
        this.rtPieces = rtPieces;
    }

    public Integer getTaStore() {
        return taStore;
    }

    public void setTaStore(Integer taStore) {
        this.taStore = taStore;
    }

    public Integer getRtStore() {
        return rtStore;
    }

    public void setRtStore(Integer rtStore) {
        this.rtStore = rtStore;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    /** Not-null value. */
    public String getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(String date) {
        this.date = date;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
