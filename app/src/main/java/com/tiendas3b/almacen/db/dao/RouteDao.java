package com.tiendas3b.almacen.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.Route;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTE".
*/
public class RouteDao extends AbstractDao<Route, Long> {

    public static final String TABLENAME = "ROUTE";

    /**
     * Properties of entity Route.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lat = new Property(1, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(2, double.class, "lng", false, "LNG");
        public final static Property Truck = new Property(3, String.class, "truck", false, "TRUCK");
        public final static Property RegionId = new Property(4, long.class, "regionId", false, "REGION_ID");
        public final static Property StoreId = new Property(5, long.class, "storeId", false, "STORE_ID");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Travel = new Property(7, int.class, "travel", false, "TRAVEL");
        public final static Property Activity = new Property(8, String.class, "activity", false, "ACTIVITY");
    };

    private DaoSession daoSession;


    public RouteDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LAT\" REAL NOT NULL ," + // 1: lat
                "\"LNG\" REAL NOT NULL ," + // 2: lng
                "\"TRUCK\" TEXT NOT NULL ," + // 3: truck
                "\"REGION_ID\" INTEGER NOT NULL ," + // 4: regionId
                "\"STORE_ID\" INTEGER NOT NULL ," + // 5: storeId
                "\"DATE\" TEXT NOT NULL ," + // 6: date
                "\"TRAVEL\" INTEGER NOT NULL ," + // 7: travel
                "\"ACTIVITY\" TEXT NOT NULL );"); // 8: activity
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ROUTE_REGION_ID_STORE_ID_DATE_TRAVEL_ACTIVITY ON ROUTE" +
                " (\"REGION_ID\",\"STORE_ID\",\"DATE\",\"TRAVEL\",\"ACTIVITY\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
        stmt.bindString(4, entity.getTruck());
        stmt.bindLong(5, entity.getRegionId());
        stmt.bindLong(6, entity.getStoreId());
        stmt.bindString(7, entity.getDate());
        stmt.bindLong(8, entity.getTravel());
        stmt.bindString(9, entity.getActivity());
    }

    @Override
    protected void attachEntity(Route entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Route readEntity(Cursor cursor, int offset) {
        Route entity = new Route( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // lat
            cursor.getDouble(offset + 2), // lng
            cursor.getString(offset + 3), // truck
            cursor.getLong(offset + 4), // regionId
            cursor.getLong(offset + 5), // storeId
            cursor.getString(offset + 6), // date
            cursor.getInt(offset + 7), // travel
            cursor.getString(offset + 8) // activity
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Route entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setLng(cursor.getDouble(offset + 2));
        entity.setTruck(cursor.getString(offset + 3));
        entity.setRegionId(cursor.getLong(offset + 4));
        entity.setStoreId(cursor.getLong(offset + 5));
        entity.setDate(cursor.getString(offset + 6));
        entity.setTravel(cursor.getInt(offset + 7));
        entity.setActivity(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Route entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Route entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRegionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getStoreDao().getAllColumns());
            builder.append(" FROM ROUTE T");
            builder.append(" LEFT JOIN REGION T0 ON T.\"REGION_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN STORE T1 ON T.\"STORE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Route loadCurrentDeep(Cursor cursor, boolean lock) {
        Route entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Region region = loadCurrentOther(daoSession.getRegionDao(), cursor, offset);
         if(region != null) {
            entity.setRegion(region);
        }
        offset += daoSession.getRegionDao().getAllColumns().length;

        Store store = loadCurrentOther(daoSession.getStoreDao(), cursor, offset);
         if(store != null) {
            entity.setStore(store);
        }

        return entity;    
    }

    public Route loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Route> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Route> list = new ArrayList<Route>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Route> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Route> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
