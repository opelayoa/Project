package com.tiendas3b.almacen.db.dao;

import com.tiendas3b.almacen.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "RECEIPT_SHEET".
 */
public class ReceiptSheet extends EqualsBase  {

    private Long id;
    private Integer level;
    private String dateTime;
    private String arriveTime;
    private String deliveryTime;
    private String departureTime;
    private Boolean arrive;
    private Integer numReceivers;
    private Integer withoutDate;
    private Integer folio;
    private Integer paletizado;
    private Float amountFact;
    private Float amountEm;
    private String rfcProvider;
    private Float iva;
    private Float ieps;
    private Integer platform;
    private long regionId;
    private long providerId;
    /** Not-null value. */
    private java.util.Date receiptDate;
    private int odc;
    /** Not-null value. */
    private String facturaRef;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReceiptSheetDao myDao;

    private Region region;
    private Long region__resolvedKey;

    private Provider provider;
    private Long provider__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ReceiptSheet() {
    }

    public ReceiptSheet(Long id) {
        this.id = id;
    }

    public ReceiptSheet(Long id, Integer level, String dateTime, String arriveTime, String deliveryTime, String departureTime, Boolean arrive, Integer numReceivers, Integer withoutDate, Integer folio, Integer paletizado, Float amountFact, Float amountEm, String rfcProvider, Float iva, Float ieps, Integer platform, long regionId, long providerId, java.util.Date receiptDate, int odc, String facturaRef) {
        this.id = id;
        this.level = level;
        this.dateTime = dateTime;
        this.arriveTime = arriveTime;
        this.deliveryTime = deliveryTime;
        this.departureTime = departureTime;
        this.arrive = arrive;
        this.numReceivers = numReceivers;
        this.withoutDate = withoutDate;
        this.folio = folio;
        this.paletizado = paletizado;
        this.amountFact = amountFact;
        this.amountEm = amountEm;
        this.rfcProvider = rfcProvider;
        this.iva = iva;
        this.ieps = ieps;
        this.platform = platform;
        this.regionId = regionId;
        this.providerId = providerId;
        this.receiptDate = receiptDate;
        this.odc = odc;
        this.facturaRef = facturaRef;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReceiptSheetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getLevel() {
        return level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    public String getDateTime() {
        return dateTime;
    }

    public void setDateTime(String dateTime) {
        this.dateTime = dateTime;
    }

    public String getArriveTime() {
        return arriveTime;
    }

    public void setArriveTime(String arriveTime) {
        this.arriveTime = arriveTime;
    }

    public String getDeliveryTime() {
        return deliveryTime;
    }

    public void setDeliveryTime(String deliveryTime) {
        this.deliveryTime = deliveryTime;
    }

    public String getDepartureTime() {
        return departureTime;
    }

    public void setDepartureTime(String departureTime) {
        this.departureTime = departureTime;
    }

    public Boolean getArrive() {
        return arrive;
    }

    public void setArrive(Boolean arrive) {
        this.arrive = arrive;
    }

    public Integer getNumReceivers() {
        return numReceivers;
    }

    public void setNumReceivers(Integer numReceivers) {
        this.numReceivers = numReceivers;
    }

    public Integer getWithoutDate() {
        return withoutDate;
    }

    public void setWithoutDate(Integer withoutDate) {
        this.withoutDate = withoutDate;
    }

    public Integer getFolio() {
        return folio;
    }

    public void setFolio(Integer folio) {
        this.folio = folio;
    }

    public Integer getPaletizado() {
        return paletizado;
    }

    public void setPaletizado(Integer paletizado) {
        this.paletizado = paletizado;
    }

    public Float getAmountFact() {
        return amountFact;
    }

    public void setAmountFact(Float amountFact) {
        this.amountFact = amountFact;
    }

    public Float getAmountEm() {
        return amountEm;
    }

    public void setAmountEm(Float amountEm) {
        this.amountEm = amountEm;
    }

    public String getRfcProvider() {
        return rfcProvider;
    }

    public void setRfcProvider(String rfcProvider) {
        this.rfcProvider = rfcProvider;
    }

    public Float getIva() {
        return iva;
    }

    public void setIva(Float iva) {
        this.iva = iva;
    }

    public Float getIeps() {
        return ieps;
    }

    public void setIeps(Float ieps) {
        this.ieps = ieps;
    }

    public Integer getPlatform() {
        return platform;
    }

    public void setPlatform(Integer platform) {
        this.platform = platform;
    }

    public long getRegionId() {
        return regionId;
    }

    public void setRegionId(long regionId) {
        this.regionId = regionId;
    }

    public long getProviderId() {
        return providerId;
    }

    public void setProviderId(long providerId) {
        this.providerId = providerId;
    }

    /** Not-null value. */
    public java.util.Date getReceiptDate() {
        return receiptDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setReceiptDate(java.util.Date receiptDate) {
        this.receiptDate = receiptDate;
    }

    public int getOdc() {
        return odc;
    }

    public void setOdc(int odc) {
        this.odc = odc;
    }

    /** Not-null value. */
    public String getFacturaRef() {
        return facturaRef;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFacturaRef(String facturaRef) {
        this.facturaRef = facturaRef;
    }

    /** To-one relationship, resolved on first access. */
    public Region getRegion() {
        long __key = this.regionId;
        if (region__resolvedKey == null || !region__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RegionDao targetDao = daoSession.getRegionDao();
            Region regionNew = targetDao.load(__key);
            synchronized (this) {
                region = regionNew;
            	region__resolvedKey = __key;
            }
        }
        return region;
    }

    public void setRegion(Region region) {
        if (region == null) {
            throw new DaoException("To-one property 'regionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.region = region;
            regionId = region.getId();
            region__resolvedKey = regionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Provider getProvider() {
        long __key = this.providerId;
        if (provider__resolvedKey == null || !provider__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProviderDao targetDao = daoSession.getProviderDao();
            Provider providerNew = targetDao.load(__key);
            synchronized (this) {
                provider = providerNew;
            	provider__resolvedKey = __key;
            }
        }
        return provider;
    }

    public void setProvider(Provider provider) {
        if (provider == null) {
            throw new DaoException("To-one property 'providerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.provider = provider;
            providerId = provider.getId();
            provider__resolvedKey = providerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
