package com.tiendas3b.almacen.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.almacen.db.dao.Barcode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BARCODE".
*/
public class BarcodeDao extends AbstractDao<Barcode, Void> {

    public static final String TABLENAME = "BARCODE";

    /**
     * Properties of entity Barcode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Icb = new Property(0, String.class, "icb", false, "ICB");
        public final static Property Iclave = new Property(1, Integer.class, "iclave", false, "ICLAVE");
        public final static Property Idesc = new Property(2, String.class, "idesc", false, "IDESC");
        public final static Property Uclave = new Property(3, Integer.class, "uclave", false, "UCLAVE");
    };


    public BarcodeDao(DaoConfig config) {
        super(config);
    }
    
    public BarcodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BARCODE\" (" + //
                "\"ICB\" TEXT," + // 0: icb
                "\"ICLAVE\" INTEGER," + // 1: iclave
                "\"IDESC\" TEXT," + // 2: idesc
                "\"UCLAVE\" INTEGER);"); // 3: uclave
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BARCODE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Barcode entity) {
        stmt.clearBindings();
 
        String icb = entity.getIcb();
        if (icb != null) {
            stmt.bindString(1, icb);
        }
 
        Integer iclave = entity.getIclave();
        if (iclave != null) {
            stmt.bindLong(2, iclave);
        }
 
        String idesc = entity.getIdesc();
        if (idesc != null) {
            stmt.bindString(3, idesc);
        }
 
        Integer uclave = entity.getUclave();
        if (uclave != null) {
            stmt.bindLong(4, uclave);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Barcode readEntity(Cursor cursor, int offset) {
        Barcode entity = new Barcode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // icb
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // iclave
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idesc
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // uclave
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Barcode entity, int offset) {
        entity.setIcb(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIclave(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIdesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUclave(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Barcode entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Barcode entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
